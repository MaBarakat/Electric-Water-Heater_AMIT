
Electric_Water_Heater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001114  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00001114  000011a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  00800096  00800096  000011de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001210  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000380  00000000  00000000  0000124c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000272f  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011f3  00000000  00000000  00003cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018e0  00000000  00000000  00004eee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000658  00000000  00000000  000067d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f05  00000000  00000000  00006e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f70  00000000  00000000  00007d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  00008c9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__vector_10>
      2c:	0c 94 5d 05 	jmp	0xaba	; 0xaba <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3a       	cpi	r26, 0xAA	; 170
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
      8a:	0c 94 88 08 	jmp	0x1110	; 0x1110 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <timer_isr>:
    }
}

void timer_isr (void)//function of the timer
{
	temp_timer++;
      92:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <temp_timer>
      96:	8f 5f       	subi	r24, 0xFF	; 255
      98:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <temp_timer>
	if (seting_mode == 1)
      9c:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <seting_mode>
      a0:	81 30       	cpi	r24, 0x01	; 1
      a2:	79 f4       	brne	.+30     	; 0xc2 <timer_isr+0x30>
	{
		seting_mode_counter++;
      a4:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <seting_mode_counter>
      a8:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <seting_mode_counter+0x1>
      ac:	01 96       	adiw	r24, 0x01	; 1
      ae:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <seting_mode_counter+0x1>
      b2:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <seting_mode_counter>
		blink_counter++;
      b6:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <blink_counter>
      ba:	8f 5f       	subi	r24, 0xFF	; 255
      bc:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <blink_counter>
      c0:	08 95       	ret
	}else if (on_off_count == 1 )
      c2:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end>
      c6:	81 30       	cpi	r24, 0x01	; 1
      c8:	b9 f4       	brne	.+46     	; 0xf8 <timer_isr+0x66>
	{if (heating_indicator == 1)
      ca:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <heating_indicator>
      ce:	81 30       	cpi	r24, 0x01	; 1
      d0:	31 f4       	brne	.+12     	; 0xde <timer_isr+0x4c>
	{blink_counter++;
      d2:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <blink_counter>
      d6:	8f 5f       	subi	r24, 0xFF	; 255
      d8:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <blink_counter>
      dc:	08 95       	ret
	}else if (Req_Temp_achieved_indicator==1)
      de:	80 91 9a 00 	lds	r24, 0x009A	; 0x80009a <Req_Temp_achieved_indicator>
      e2:	81 30       	cpi	r24, 0x01	; 1
      e4:	49 f4       	brne	.+18     	; 0xf8 <timer_isr+0x66>
		{Req_Temp_achieved_counter++;
      e6:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <Req_Temp_achieved_counter>
      ea:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <Req_Temp_achieved_counter+0x1>
      ee:	01 96       	adiw	r24, 0x01	; 1
      f0:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <Req_Temp_achieved_counter+0x1>
      f4:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <Req_Temp_achieved_counter>
      f8:	08 95       	ret

000000fa <main>:
uint8 seting_mode=0 ,on_off_count=0;
/* seting_mode :indicate to seting_mode on or off  */
/* on_off_count :indicate to system on or off  */

int main(void)
{
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
      fe:	cd b7       	in	r28, 0x3d	; 61
     100:	de b7       	in	r29, 0x3e	; 62
     102:	a9 97       	sbiw	r28, 0x29	; 41
     104:	0f b6       	in	r0, 0x3f	; 63
     106:	f8 94       	cli
     108:	de bf       	out	0x3e, r29	; 62
     10a:	0f be       	out	0x3f, r0	; 63
     10c:	cd bf       	out	0x3d, r28	; 61
	//initialization
	EXT_ADC_vid_int();//ADC_interface
     10e:	0e 94 81 03 	call	0x702	; 0x702 <EXT_ADC_vid_int>
	TIMER_vid_int();//timer_interface
     112:	0e 94 4a 04 	call	0x894	; 0x894 <TIMER_vid_int>
	EEPROM_voidInit();//TWI_interface to work with EEPROM
     116:	0e 94 78 03 	call	0x6f0	; 0x6f0 <EEPROM_voidInit>
		/* LED_count :indicate to number of leds in system  */
		/* SW_count :indicate to number of buttons in system   */
		/* S7_seg_count :indicate to number of seven segments in system  */
		/* int_count :the counter used to initialize leds,buttons and seven segments  */
	uint8 LED_count=2,SW_count=3,S7_seg_count=2,int_count=0;
	for (int_count=1;int_count<=LED_count;int_count++)
     11a:	11 e0       	ldi	r17, 0x01	; 1
     11c:	04 c0       	rjmp	.+8      	; 0x126 <main+0x2c>
	{LED_vid_INT(int_count);//leds_interface
     11e:	81 2f       	mov	r24, r17
     120:	0e 94 97 03 	call	0x72e	; 0x72e <LED_vid_INT>
		/* LED_count :indicate to number of leds in system  */
		/* SW_count :indicate to number of buttons in system   */
		/* S7_seg_count :indicate to number of seven segments in system  */
		/* int_count :the counter used to initialize leds,buttons and seven segments  */
	uint8 LED_count=2,SW_count=3,S7_seg_count=2,int_count=0;
	for (int_count=1;int_count<=LED_count;int_count++)
     124:	1f 5f       	subi	r17, 0xFF	; 255
     126:	13 30       	cpi	r17, 0x03	; 3
     128:	d0 f3       	brcs	.-12     	; 0x11e <main+0x24>
	{LED_vid_INT(int_count);//leds_interface
	}
	HEATER_vid_INT();//Heating Element_interface
     12a:	0e 94 89 03 	call	0x712	; 0x712 <HEATER_vid_INT>
	COLLER_vid_INT();//Cooling Element_interface
     12e:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <COLLER_vid_INT>
	for (int_count=1;int_count<=SW_count;int_count++)
     132:	11 e0       	ldi	r17, 0x01	; 1
     134:	04 c0       	rjmp	.+8      	; 0x13e <main+0x44>
	{SW_vid_INT(int_count);//buttons_interface
     136:	81 2f       	mov	r24, r17
     138:	0e 94 23 04 	call	0x846	; 0x846 <SW_vid_INT>
	for (int_count=1;int_count<=LED_count;int_count++)
	{LED_vid_INT(int_count);//leds_interface
	}
	HEATER_vid_INT();//Heating Element_interface
	COLLER_vid_INT();//Cooling Element_interface
	for (int_count=1;int_count<=SW_count;int_count++)
     13c:	1f 5f       	subi	r17, 0xFF	; 255
     13e:	14 30       	cpi	r17, 0x04	; 4
     140:	d0 f3       	brcs	.-12     	; 0x136 <main+0x3c>
     142:	11 e0       	ldi	r17, 0x01	; 1
     144:	04 c0       	rjmp	.+8      	; 0x14e <main+0x54>
	{SW_vid_INT(int_count);//buttons_interface
	}
	
	for (int_count=1;int_count<=S7_seg_count;int_count++)
	{SE7_seg_vid_int(int_count);//seven segments_interface
     146:	81 2f       	mov	r24, r17
     148:	0e 94 bf 03 	call	0x77e	; 0x77e <SE7_seg_vid_int>
	COLLER_vid_INT();//Cooling Element_interface
	for (int_count=1;int_count<=SW_count;int_count++)
	{SW_vid_INT(int_count);//buttons_interface
	}
	
	for (int_count=1;int_count<=S7_seg_count;int_count++)
     14c:	1f 5f       	subi	r17, 0xFF	; 255
     14e:	13 30       	cpi	r17, 0x03	; 3
     150:	d0 f3       	brcs	.-12     	; 0x146 <main+0x4c>
	{SE7_seg_vid_int(int_count);//seven segments_interface
	}
	
	//coding
		//timer prepare					
		TIMER_vid_COMP_Interrupt_Enable();
     152:	0e 94 59 04 	call	0x8b2	; 0x8b2 <TIMER_vid_COMP_Interrupt_Enable>
		TIMER_vid_Write_COMP_OCR0(249);//the timer cycle take 4ms
     156:	89 ef       	ldi	r24, 0xF9	; 249
     158:	0e 94 56 04 	call	0x8ac	; 0x8ac <TIMER_vid_Write_COMP_OCR0>
		timer_isr_fun(timer_isr);
     15c:	89 e4       	ldi	r24, 0x49	; 73
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <timer_isr_fun>
	// water_temp it is the temperature from sensor
	sint32 water_temp_arr[10];//the ten readings
	sint32 water_temp=0;//the average read
	
	//The initial set temperature is 60 degrees.
	uint8 temp=60;// temp it is the required temperature
     164:	8c e3       	ldi	r24, 0x3C	; 60
     166:	89 a7       	std	Y+41, r24	; 0x29
	EEPROM_SendData(0X00,temp);
     168:	6c e3       	ldi	r22, 0x3C	; 60
     16a:	80 e0       	ldi	r24, 0x00	; 0
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <EEPROM_SendData>
	SE7_seg_vid_write(Tens_count,1);
     172:	61 e0       	ldi	r22, 0x01	; 1
     174:	86 e0       	ldi	r24, 0x06	; 6
     176:	0e 94 f5 03 	call	0x7ea	; 0x7ea <SE7_seg_vid_write>
	SE7_seg_vid_write(ones_count,2);
     17a:	62 e0       	ldi	r22, 0x02	; 2
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <SE7_seg_vid_write>
/* Tens_count :the left (Tens) seven segment  */
/* ones_count :the right (ones) seven segment  */

	// water_temp it is the temperature from sensor
	sint32 water_temp_arr[10];//the ten readings
	sint32 water_temp=0;//the average read
     182:	c1 2c       	mov	r12, r1
     184:	d1 2c       	mov	r13, r1
     186:	76 01       	movw	r14, r12
		TIMER_vid_COMP_Interrupt_Enable();
		TIMER_vid_Write_COMP_OCR0(249);//the timer cycle take 4ms
		timer_isr_fun(timer_isr);
	
	//variables for tasks
	uint8 Tens_count=6,ones_count=0;
     188:	00 e0       	ldi	r16, 0x00	; 0
     18a:	16 e0       	ldi	r17, 0x06	; 6
	SE7_seg_vid_write(ones_count,2);
	
    while (1) 
    {
		//the electric water heater is off
		if (on_off_count == 0)
     18c:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end>
     190:	81 11       	cpse	r24, r1
     192:	eb c0       	rjmp	.+470    	; 0x36a <main+0x270>
		{LED_vid_write(LOW_LED,on_off_led);	//system off
     194:	62 e0       	ldi	r22, 0x02	; 2
     196:	0e 94 af 03 	call	0x75e	; 0x75e <LED_vid_write>
		water_temp=(float32)((float32)((float32)EXT_ADC_u16ReadDigitalVal(CHANNEL0)*2.5)/10);//first reading degree
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	0e 94 86 03 	call	0x70c	; 0x70c <EXT_ADC_u16ReadDigitalVal>
     1a0:	bc 01       	movw	r22, r24
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0e 94 4c 07 	call	0xe98	; 0xe98 <__floatunsisf>
     1aa:	20 e0       	ldi	r18, 0x00	; 0
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	40 e2       	ldi	r20, 0x20	; 32
     1b0:	50 e4       	ldi	r21, 0x40	; 64
     1b2:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__mulsf3>
     1b6:	20 e0       	ldi	r18, 0x00	; 0
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	40 e2       	ldi	r20, 0x20	; 32
     1bc:	51 e4       	ldi	r21, 0x41	; 65
     1be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__divsf3>
     1c2:	0e 94 16 07 	call	0xe2c	; 0xe2c <__fixsfsi>
     1c6:	6b 01       	movw	r12, r22
     1c8:	7c 01       	movw	r14, r24
		LED_vid_write(LOW_LED,Heating_Element_led);
     1ca:	61 e0       	ldi	r22, 0x01	; 1
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	0e 94 af 03 	call	0x75e	; 0x75e <LED_vid_write>
				COLLER_vid_write(COLLER_OFF);
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <COLLER_vid_write>
				HEATER_vid_write(Heater_OFF);
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	0e 94 92 03 	call	0x724	; 0x724 <HEATER_vid_write>
				heating_indicator=0;
     1de:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <heating_indicator>
				colling_indicator=0;
     1e2:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <colling_indicator>
				Req_Temp_achieved_indicator=0;
     1e6:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <Req_Temp_achieved_indicator>
		//setting mode 
			//button 1 the increasing button
			if (SW_u8_reed(1)==0 )
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	0e 94 3b 04 	call	0x876	; 0x876 <SW_u8_reed>
     1f0:	81 11       	cpse	r24, r1
     1f2:	5b c0       	rjmp	.+182    	; 0x2aa <main+0x1b0>
			{if (seting_mode==0)//setting mode off
     1f4:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <seting_mode>
     1f8:	81 11       	cpse	r24, r1
     1fa:	0b c0       	rjmp	.+22     	; 0x212 <main+0x118>
				{seting_mode=1;//setting mode on //the first press
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <seting_mode>
					TIMER_vid_Start();
     202:	0e 94 4d 04 	call	0x89a	; 0x89a <TIMER_vid_Start>
					while(SW_u8_reed(1)==0);//waiting until release the button
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	0e 94 3b 04 	call	0x876	; 0x876 <SW_u8_reed>
     20c:	88 23       	and	r24, r24
     20e:	d9 f3       	breq	.-10     	; 0x206 <main+0x10c>
     210:	37 c0       	rjmp	.+110    	; 0x280 <main+0x186>
				}else	//setting mode on //not the first press
				{	//put the temp you want by increasing
					//increasing button by 5 degrees
					
					if (ones_count == 0)
     212:	01 11       	cpse	r16, r1
     214:	19 c0       	rjmp	.+50     	; 0x248 <main+0x14e>
					{ones_count=5;
					temp=(Tens_count*10)+ones_count;
     216:	61 2f       	mov	r22, r17
     218:	66 0f       	add	r22, r22
     21a:	86 2f       	mov	r24, r22
     21c:	88 0f       	add	r24, r24
     21e:	88 0f       	add	r24, r24
     220:	68 0f       	add	r22, r24
     222:	6b 5f       	subi	r22, 0xFB	; 251
     224:	69 a7       	std	Y+41, r22	; 0x29
					EEPROM_SendData(0X00,temp);//save in EEPROM
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <EEPROM_SendData>
					while(SW_u8_reed(1)==0);
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	0e 94 3b 04 	call	0x876	; 0x876 <SW_u8_reed>
     234:	88 23       	and	r24, r24
     236:	d9 f3       	breq	.-10     	; 0x22e <main+0x134>
					EEPROM_ReadData(0x00,&temp);
     238:	be 01       	movw	r22, r28
     23a:	67 5d       	subi	r22, 0xD7	; 215
     23c:	7f 4f       	sbci	r23, 0xFF	; 255
     23e:	80 e0       	ldi	r24, 0x00	; 0
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	0e 94 7e 03 	call	0x6fc	; 0x6fc <EEPROM_ReadData>
     246:	1c c0       	rjmp	.+56     	; 0x280 <main+0x186>
					}else if (ones_count == 5 && Tens_count !=7)
     248:	05 30       	cpi	r16, 0x05	; 5
     24a:	d1 f4       	brne	.+52     	; 0x280 <main+0x186>
     24c:	17 30       	cpi	r17, 0x07	; 7
     24e:	c1 f0       	breq	.+48     	; 0x280 <main+0x186>
					{ones_count=0;
					Tens_count++;
     250:	61 e0       	ldi	r22, 0x01	; 1
     252:	61 0f       	add	r22, r17
					temp=Tens_count*10;
     254:	66 0f       	add	r22, r22
     256:	86 2f       	mov	r24, r22
     258:	88 0f       	add	r24, r24
     25a:	88 0f       	add	r24, r24
     25c:	68 0f       	add	r22, r24
     25e:	69 a7       	std	Y+41, r22	; 0x29
					EEPROM_SendData(0X00,temp);
     260:	80 e0       	ldi	r24, 0x00	; 0
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <EEPROM_SendData>
					while(SW_u8_reed(1)==0);
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	0e 94 3b 04 	call	0x876	; 0x876 <SW_u8_reed>
     26e:	88 23       	and	r24, r24
     270:	d9 f3       	breq	.-10     	; 0x268 <main+0x16e>
					EEPROM_ReadData(0x00,&temp);
     272:	be 01       	movw	r22, r28
     274:	67 5d       	subi	r22, 0xD7	; 215
     276:	7f 4f       	sbci	r23, 0xFF	; 255
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <EEPROM_ReadData>
					}
				}
				//write on seven segment
				Tens_count=temp/10;
     280:	99 a5       	ldd	r25, Y+41	; 0x29
     282:	1d ec       	ldi	r17, 0xCD	; 205
     284:	91 9f       	mul	r25, r17
     286:	11 2d       	mov	r17, r1
     288:	11 24       	eor	r1, r1
     28a:	16 95       	lsr	r17
     28c:	16 95       	lsr	r17
     28e:	16 95       	lsr	r17
				ones_count=temp%10;
     290:	21 2f       	mov	r18, r17
     292:	22 0f       	add	r18, r18
     294:	82 2f       	mov	r24, r18
     296:	88 0f       	add	r24, r24
     298:	88 0f       	add	r24, r24
     29a:	82 0f       	add	r24, r18
     29c:	09 2f       	mov	r16, r25
     29e:	08 1b       	sub	r16, r24
				seting_mode_counter=0;//count 5 sec after last press
     2a0:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <seting_mode_counter+0x1>
     2a4:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <seting_mode_counter>
     2a8:	60 c0       	rjmp	.+192    	; 0x36a <main+0x270>
				}
				
		//button 2 the decreasing button
				else if (SW_u8_reed(2)==0 )
     2aa:	82 e0       	ldi	r24, 0x02	; 2
     2ac:	0e 94 3b 04 	call	0x876	; 0x876 <SW_u8_reed>
     2b0:	81 11       	cpse	r24, r1
     2b2:	5b c0       	rjmp	.+182    	; 0x36a <main+0x270>
				{if (seting_mode==0)//setting mode off 
     2b4:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <seting_mode>
     2b8:	81 11       	cpse	r24, r1
     2ba:	0b c0       	rjmp	.+22     	; 0x2d2 <main+0x1d8>
					{seting_mode=1;//setting mode on //the first press
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	80 93 97 00 	sts	0x0097, r24	; 0x800097 <seting_mode>
					TIMER_vid_Start();
     2c2:	0e 94 4d 04 	call	0x89a	; 0x89a <TIMER_vid_Start>
					while(SW_u8_reed(2)==0);//waiting until release the button
     2c6:	82 e0       	ldi	r24, 0x02	; 2
     2c8:	0e 94 3b 04 	call	0x876	; 0x876 <SW_u8_reed>
     2cc:	88 23       	and	r24, r24
     2ce:	d9 f3       	breq	.-10     	; 0x2c6 <main+0x1cc>
     2d0:	39 c0       	rjmp	.+114    	; 0x344 <main+0x24a>
					}
					else//setting mode on //not the first press
					{	//put the temp you want by decreasing
						//decreasing button by 5 degrees
						
						if (ones_count == 5 && Tens_count !=3)
     2d2:	05 30       	cpi	r16, 0x05	; 5
     2d4:	d1 f4       	brne	.+52     	; 0x30a <main+0x210>
     2d6:	13 30       	cpi	r17, 0x03	; 3
     2d8:	c1 f0       	breq	.+48     	; 0x30a <main+0x210>
						{ones_count=0;
							temp=(Tens_count*10);
     2da:	61 2f       	mov	r22, r17
     2dc:	66 0f       	add	r22, r22
     2de:	86 2f       	mov	r24, r22
     2e0:	88 0f       	add	r24, r24
     2e2:	88 0f       	add	r24, r24
     2e4:	68 0f       	add	r22, r24
     2e6:	69 a7       	std	Y+41, r22	; 0x29
							EEPROM_SendData(0X00,temp);//save in EEPROM
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <EEPROM_SendData>
							while(SW_u8_reed(2)==0);
     2f0:	82 e0       	ldi	r24, 0x02	; 2
     2f2:	0e 94 3b 04 	call	0x876	; 0x876 <SW_u8_reed>
     2f6:	88 23       	and	r24, r24
     2f8:	d9 f3       	breq	.-10     	; 0x2f0 <main+0x1f6>
							EEPROM_ReadData(0x00,&temp);
     2fa:	be 01       	movw	r22, r28
     2fc:	67 5d       	subi	r22, 0xD7	; 215
     2fe:	7f 4f       	sbci	r23, 0xFF	; 255
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 7e 03 	call	0x6fc	; 0x6fc <EEPROM_ReadData>
     308:	1d c0       	rjmp	.+58     	; 0x344 <main+0x24a>
						}else if (ones_count == 0 && Tens_count !=3)
     30a:	01 11       	cpse	r16, r1
     30c:	1b c0       	rjmp	.+54     	; 0x344 <main+0x24a>
     30e:	13 30       	cpi	r17, 0x03	; 3
     310:	c9 f0       	breq	.+50     	; 0x344 <main+0x24a>
						{
							ones_count=5;
							Tens_count--;
     312:	6f ef       	ldi	r22, 0xFF	; 255
     314:	61 0f       	add	r22, r17
							temp=Tens_count*10+ones_count;
     316:	66 0f       	add	r22, r22
     318:	86 2f       	mov	r24, r22
     31a:	88 0f       	add	r24, r24
     31c:	88 0f       	add	r24, r24
     31e:	68 0f       	add	r22, r24
     320:	6b 5f       	subi	r22, 0xFB	; 251
     322:	69 a7       	std	Y+41, r22	; 0x29
							EEPROM_SendData(0X00,temp);
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <EEPROM_SendData>
							while(SW_u8_reed(2)==0);
     32c:	82 e0       	ldi	r24, 0x02	; 2
     32e:	0e 94 3b 04 	call	0x876	; 0x876 <SW_u8_reed>
     332:	88 23       	and	r24, r24
     334:	d9 f3       	breq	.-10     	; 0x32c <main+0x232>
							EEPROM_ReadData(0x00,&temp);
     336:	be 01       	movw	r22, r28
     338:	67 5d       	subi	r22, 0xD7	; 215
     33a:	7f 4f       	sbci	r23, 0xFF	; 255
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 7e 03 	call	0x6fc	; 0x6fc <EEPROM_ReadData>
						}
					}
					//write on seven segment
					Tens_count=temp/10;
     344:	09 a5       	ldd	r16, Y+41	; 0x29
     346:	1d ec       	ldi	r17, 0xCD	; 205
     348:	01 9f       	mul	r16, r17
     34a:	11 2d       	mov	r17, r1
     34c:	11 24       	eor	r1, r1
     34e:	16 95       	lsr	r17
     350:	16 95       	lsr	r17
     352:	16 95       	lsr	r17
					ones_count=temp-Tens_count*10;
     354:	91 2f       	mov	r25, r17
     356:	99 0f       	add	r25, r25
     358:	89 2f       	mov	r24, r25
     35a:	88 0f       	add	r24, r24
     35c:	88 0f       	add	r24, r24
     35e:	89 0f       	add	r24, r25
     360:	08 1b       	sub	r16, r24
					seting_mode_counter=0;//count 5 sec after last press
     362:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <seting_mode_counter+0x1>
     366:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <seting_mode_counter>
				
		}else
		{//NOTHING
		}
// on or off the system 
				 if (SW_u8_reed(3)== 0)
     36a:	83 e0       	ldi	r24, 0x03	; 3
     36c:	0e 94 3b 04 	call	0x876	; 0x876 <SW_u8_reed>
     370:	81 11       	cpse	r24, r1
     372:	1b c0       	rjmp	.+54     	; 0x3aa <main+0x2b0>
				{on_off_count++;
     374:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end>
     378:	8f 5f       	subi	r24, 0xFF	; 255
     37a:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__data_end>
					if (on_off_count == 2)//system off
     37e:	82 30       	cpi	r24, 0x02	; 2
     380:	19 f4       	brne	.+6      	; 0x388 <main+0x28e>
					{	on_off_count=0;	}
     382:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__data_end>
     386:	0c c0       	rjmp	.+24     	; 0x3a0 <main+0x2a6>
					
					else if (on_off_count == 1)//system oN
     388:	81 30       	cpi	r24, 0x01	; 1
     38a:	51 f4       	brne	.+20     	; 0x3a0 <main+0x2a6>
					{	
						TIMER_vid_Reset();
     38c:	0e 94 53 04 	call	0x8a6	; 0x8a6 <TIMER_vid_Reset>
						TIMER_vid_Start();
     390:	0e 94 4d 04 	call	0x89a	; 0x89a <TIMER_vid_Start>
						seting_mode=0;
     394:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <seting_mode>
						seting_mode_counter=0;
     398:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <seting_mode_counter+0x1>
     39c:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <seting_mode_counter>
					}
						while(SW_u8_reed(3) == 0);		
     3a0:	83 e0       	ldi	r24, 0x03	; 3
     3a2:	0e 94 3b 04 	call	0x876	; 0x876 <SW_u8_reed>
     3a6:	88 23       	and	r24, r24
     3a8:	d9 f3       	breq	.-10     	; 0x3a0 <main+0x2a6>
				}	
	
				
	//timers 			
// reading the temp sensor and the timer of the system 100ms
		if (temp_timer==25)
     3aa:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <temp_timer>
     3ae:	89 31       	cpi	r24, 0x19	; 25
     3b0:	09 f0       	breq	.+2      	; 0x3b4 <main+0x2ba>
     3b2:	5a c0       	rjmp	.+180    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
		{	water_temp_arr[temp_counter]=(float32)((float32)((float32)EXT_ADC_u16ReadDigitalVal(CHANNEL0)*2.5)/10);
     3b4:	a0 90 a1 00 	lds	r10, 0x00A1	; 0x8000a1 <temp_counter>
     3b8:	b1 2c       	mov	r11, r1
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	0e 94 86 03 	call	0x70c	; 0x70c <EXT_ADC_u16ReadDigitalVal>
     3c0:	bc 01       	movw	r22, r24
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 4c 07 	call	0xe98	; 0xe98 <__floatunsisf>
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	40 e2       	ldi	r20, 0x20	; 32
     3d0:	50 e4       	ldi	r21, 0x40	; 64
     3d2:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__mulsf3>
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	40 e2       	ldi	r20, 0x20	; 32
     3dc:	51 e4       	ldi	r21, 0x41	; 65
     3de:	0e 94 a4 06 	call	0xd48	; 0xd48 <__divsf3>
     3e2:	aa 0c       	add	r10, r10
     3e4:	bb 1c       	adc	r11, r11
     3e6:	aa 0c       	add	r10, r10
     3e8:	bb 1c       	adc	r11, r11
     3ea:	21 e0       	ldi	r18, 0x01	; 1
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	2c 0f       	add	r18, r28
     3f0:	3d 1f       	adc	r19, r29
     3f2:	a2 0e       	add	r10, r18
     3f4:	b3 1e       	adc	r11, r19
     3f6:	0e 94 16 07 	call	0xe2c	; 0xe2c <__fixsfsi>
     3fa:	f5 01       	movw	r30, r10
     3fc:	60 83       	st	Z, r22
     3fe:	71 83       	std	Z+1, r23	; 0x01
     400:	82 83       	std	Z+2, r24	; 0x02
     402:	93 83       	std	Z+3, r25	; 0x03
			temp_counter++;
     404:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <temp_counter>
     408:	8f 5f       	subi	r24, 0xFF	; 255
     40a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <temp_counter>
			if (temp_counter==10)
     40e:	8a 30       	cpi	r24, 0x0A	; 10
     410:	49 f5       	brne	.+82     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
			{water_temp=water_temp_arr[0];
     412:	49 81       	ldd	r20, Y+1	; 0x01
     414:	5a 81       	ldd	r21, Y+2	; 0x02
     416:	6b 81       	ldd	r22, Y+3	; 0x03
     418:	7c 81       	ldd	r23, Y+4	; 0x04
				for (uint8 i=1;i<10;i++)
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	15 c0       	rjmp	.+42     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
				{water_temp+=water_temp_arr[i];
     41e:	e8 2f       	mov	r30, r24
     420:	f0 e0       	ldi	r31, 0x00	; 0
     422:	ee 0f       	add	r30, r30
     424:	ff 1f       	adc	r31, r31
     426:	ee 0f       	add	r30, r30
     428:	ff 1f       	adc	r31, r31
     42a:	21 e0       	ldi	r18, 0x01	; 1
     42c:	30 e0       	ldi	r19, 0x00	; 0
     42e:	2c 0f       	add	r18, r28
     430:	3d 1f       	adc	r19, r29
     432:	e2 0f       	add	r30, r18
     434:	f3 1f       	adc	r31, r19
     436:	c0 80       	ld	r12, Z
     438:	d1 80       	ldd	r13, Z+1	; 0x01
     43a:	e2 80       	ldd	r14, Z+2	; 0x02
     43c:	f3 80       	ldd	r15, Z+3	; 0x03
     43e:	4c 0d       	add	r20, r12
     440:	5d 1d       	adc	r21, r13
     442:	6e 1d       	adc	r22, r14
     444:	7f 1d       	adc	r23, r15
		if (temp_timer==25)
		{	water_temp_arr[temp_counter]=(float32)((float32)((float32)EXT_ADC_u16ReadDigitalVal(CHANNEL0)*2.5)/10);
			temp_counter++;
			if (temp_counter==10)
			{water_temp=water_temp_arr[0];
				for (uint8 i=1;i<10;i++)
     446:	8f 5f       	subi	r24, 0xFF	; 255
     448:	8a 30       	cpi	r24, 0x0A	; 10
     44a:	48 f3       	brcs	.-46     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
				{water_temp+=water_temp_arr[i];
				}
				water_temp/=10;
     44c:	cb 01       	movw	r24, r22
     44e:	ba 01       	movw	r22, r20
     450:	2a e0       	ldi	r18, 0x0A	; 10
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	40 e0       	ldi	r20, 0x00	; 0
     456:	50 e0       	ldi	r21, 0x00	; 0
     458:	0e 94 47 08 	call	0x108e	; 0x108e <__divmodsi4>
     45c:	69 01       	movw	r12, r18
     45e:	7a 01       	movw	r14, r20
				temp_counter=0;				
     460:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <temp_counter>
			}
			temp_timer=0;
     464:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <temp_timer>
		}
		
//setting mode waiting 5 sec
if (seting_mode_counter == 1250)
     468:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <seting_mode_counter>
     46c:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <seting_mode_counter+0x1>
     470:	82 3e       	cpi	r24, 0xE2	; 226
     472:	94 40       	sbci	r25, 0x04	; 4
     474:	69 f4       	brne	.+26     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
	{ seting_mode =0;
     476:	10 92 97 00 	sts	0x0097, r1	; 0x800097 <seting_mode>
	  on_off_count = 1;
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__data_end>
	  seting_mode_counter=0;
     480:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <seting_mode_counter+0x1>
     484:	10 92 9f 00 	sts	0x009F, r1	; 0x80009f <seting_mode_counter>
	  TIMER_vid_Reset();
     488:	0e 94 53 04 	call	0x8a6	; 0x8a6 <TIMER_vid_Reset>
	  TIMER_vid_Start();
     48c:	0e 94 4d 04 	call	0x89a	; 0x89a <TIMER_vid_Start>
	}
	
//blinking seven segment or heading led 1sec
 if (blink_counter==125)
     490:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <blink_counter>
     494:	8d 37       	cpi	r24, 0x7D	; 125
     496:	89 f5       	brne	.+98     	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 {	 if (seting_mode ==1)//seven segment
     498:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <seting_mode>
     49c:	81 30       	cpi	r24, 0x01	; 1
     49e:	f9 f4       	brne	.+62     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
	 { if (blink_toggle == 0)
     4a0:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <blink_toggle>
     4a4:	81 11       	cpse	r24, r1
     4a6:	0e c0       	rjmp	.+28     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
	 {	SE7_seg_vid_write(Tens_count,1);
     4a8:	61 e0       	ldi	r22, 0x01	; 1
     4aa:	81 2f       	mov	r24, r17
     4ac:	0e 94 f5 03 	call	0x7ea	; 0x7ea <SE7_seg_vid_write>
		SE7_seg_vid_write(ones_count,2);
     4b0:	62 e0       	ldi	r22, 0x02	; 2
     4b2:	80 2f       	mov	r24, r16
     4b4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <SE7_seg_vid_write>
		blink_toggle++;
     4b8:	80 91 9d 00 	lds	r24, 0x009D	; 0x80009d <blink_toggle>
     4bc:	8f 5f       	subi	r24, 0xFF	; 255
     4be:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <blink_toggle>
     4c2:	19 c0       	rjmp	.+50     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
	 }else if(blink_toggle == 1)
     4c4:	81 30       	cpi	r24, 0x01	; 1
     4c6:	b9 f4       	brne	.+46     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
     {
	 SE7_seg_vid_write(10,1);
     4c8:	61 e0       	ldi	r22, 0x01	; 1
     4ca:	8a e0       	ldi	r24, 0x0A	; 10
     4cc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <SE7_seg_vid_write>
	 SE7_seg_vid_write(10,2);
     4d0:	62 e0       	ldi	r22, 0x02	; 2
     4d2:	8a e0       	ldi	r24, 0x0A	; 10
     4d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <SE7_seg_vid_write>
	 blink_toggle=0;
     4d8:	10 92 9d 00 	sts	0x009D, r1	; 0x80009d <blink_toggle>
     4dc:	0c c0       	rjmp	.+24     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
     }
	}
	else//heading led
	 {
		  if (heating_indicator==1 && on_off_count ==1)
     4de:	80 91 9b 00 	lds	r24, 0x009B	; 0x80009b <heating_indicator>
     4e2:	81 30       	cpi	r24, 0x01	; 1
     4e4:	41 f4       	brne	.+16     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
     4e6:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end>
     4ea:	81 30       	cpi	r24, 0x01	; 1
     4ec:	21 f4       	brne	.+8      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
		 {LED_vid_write(TOGGLE_LED,Heating_Element_led);
     4ee:	61 e0       	ldi	r22, 0x01	; 1
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	0e 94 af 03 	call	0x75e	; 0x75e <LED_vid_write>
		 }else
		 {// nothing
		 }
	  }
	  blink_counter=0;
     4f6:	10 92 9e 00 	sts	0x009E, r1	; 0x80009e <blink_counter>
	 }
	 if ( colling_indicator==1 && on_off_count ==1)
     4fa:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <colling_indicator>
     4fe:	81 30       	cpi	r24, 0x01	; 1
     500:	39 f4       	brne	.+14     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
     502:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end>
     506:	81 30       	cpi	r24, 0x01	; 1
     508:	19 f4       	brne	.+6      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
	 {
		 LED_vid_write(HIGH_LED,Heating_Element_led);
     50a:	61 e0       	ldi	r22, 0x01	; 1
     50c:	0e 94 af 03 	call	0x75e	; 0x75e <LED_vid_write>
	 }	
	 
// save the power if you forgot the electric water heater
 if (Req_Temp_achieved_counter == 60000)
     510:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <Req_Temp_achieved_counter>
     514:	90 91 99 00 	lds	r25, 0x0099	; 0x800099 <Req_Temp_achieved_counter+0x1>
     518:	80 36       	cpi	r24, 0x60	; 96
     51a:	9a 4e       	sbci	r25, 0xEA	; 234
     51c:	31 f4       	brne	.+12     	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
 {on_off_count=0;
     51e:	10 92 96 00 	sts	0x0096, r1	; 0x800096 <__data_end>
  Req_Temp_achieved_counter=0;
     522:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <Req_Temp_achieved_counter+0x1>
     526:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <Req_Temp_achieved_counter>
 }
 
 
			 // heater and cooler 
//system off doings
if (on_off_count==0 && seting_mode==0)
     52a:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end>
     52e:	81 11       	cpse	r24, r1
     530:	20 c0       	rjmp	.+64     	; 0x572 <__EEPROM_REGION_LENGTH__+0x172>
     532:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <seting_mode>
     536:	81 11       	cpse	r24, r1
     538:	1c c0       	rjmp	.+56     	; 0x572 <__EEPROM_REGION_LENGTH__+0x172>
{	Tens_count=temp/10;
     53a:	99 a5       	ldd	r25, Y+41	; 0x29
     53c:	1d ec       	ldi	r17, 0xCD	; 205
     53e:	91 9f       	mul	r25, r17
     540:	11 2d       	mov	r17, r1
     542:	11 24       	eor	r1, r1
     544:	16 95       	lsr	r17
     546:	16 95       	lsr	r17
     548:	16 95       	lsr	r17
	ones_count=temp%10;
     54a:	21 2f       	mov	r18, r17
     54c:	22 0f       	add	r18, r18
     54e:	82 2f       	mov	r24, r18
     550:	88 0f       	add	r24, r24
     552:	88 0f       	add	r24, r24
     554:	82 0f       	add	r24, r18
     556:	09 2f       	mov	r16, r25
     558:	08 1b       	sub	r16, r24
	SE7_seg_vid_write(Tens_count,1);
     55a:	61 e0       	ldi	r22, 0x01	; 1
     55c:	81 2f       	mov	r24, r17
     55e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <SE7_seg_vid_write>
	SE7_seg_vid_write(ones_count,2);
     562:	62 e0       	ldi	r22, 0x02	; 2
     564:	80 2f       	mov	r24, r16
     566:	0e 94 f5 03 	call	0x7ea	; 0x7ea <SE7_seg_vid_write>
	TIMER_vid_Reset();
     56a:	0e 94 53 04 	call	0x8a6	; 0x8a6 <TIMER_vid_Reset>
	TIMER_vid_Stop();
     56e:	0e 94 50 04 	call	0x8a0	; 0x8a0 <TIMER_vid_Stop>
{
	//nothing
}

//the Heating and cooling Element control
		if (on_off_count==1)
     572:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__data_end>
     576:	81 30       	cpi	r24, 0x01	; 1
     578:	09 f0       	breq	.+2      	; 0x57c <__EEPROM_REGION_LENGTH__+0x17c>
     57a:	08 ce       	rjmp	.-1008   	; 0x18c <main+0x92>
		{	LED_vid_write(HIGH_LED,on_off_led);
     57c:	62 e0       	ldi	r22, 0x02	; 2
     57e:	0e 94 af 03 	call	0x75e	; 0x75e <LED_vid_write>
			Tens_count=water_temp/10;
     582:	c7 01       	movw	r24, r14
     584:	b6 01       	movw	r22, r12
     586:	2a e0       	ldi	r18, 0x0A	; 10
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	40 e0       	ldi	r20, 0x00	; 0
     58c:	50 e0       	ldi	r21, 0x00	; 0
     58e:	0e 94 47 08 	call	0x108e	; 0x108e <__divmodsi4>
     592:	12 2f       	mov	r17, r18
			ones_count=water_temp%10;
     594:	06 2f       	mov	r16, r22
			if (water_temp > 99)
     596:	f4 e6       	ldi	r31, 0x64	; 100
     598:	cf 16       	cp	r12, r31
     59a:	d1 04       	cpc	r13, r1
     59c:	e1 04       	cpc	r14, r1
     59e:	f1 04       	cpc	r15, r1
     5a0:	14 f0       	brlt	.+4      	; 0x5a6 <__EEPROM_REGION_LENGTH__+0x1a6>
			{
			Tens_count=9;
			ones_count=9;
     5a2:	09 e0       	ldi	r16, 0x09	; 9
		{	LED_vid_write(HIGH_LED,on_off_led);
			Tens_count=water_temp/10;
			ones_count=water_temp%10;
			if (water_temp > 99)
			{
			Tens_count=9;
     5a4:	19 e0       	ldi	r17, 0x09	; 9
			ones_count=9;
			}
			
			SE7_seg_vid_write(Tens_count,1);
     5a6:	61 e0       	ldi	r22, 0x01	; 1
     5a8:	81 2f       	mov	r24, r17
     5aa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <SE7_seg_vid_write>
			SE7_seg_vid_write(ones_count,2);
     5ae:	62 e0       	ldi	r22, 0x02	; 2
     5b0:	80 2f       	mov	r24, r16
     5b2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <SE7_seg_vid_write>
			//the first water temp is near to required temp already
			if ((water_temp < (temp+5) ) && ( water_temp > (temp-5)) && (colling_indicator==0 && heating_indicator==0)&& Req_Temp_achieved_indicator==0) 
     5b6:	89 a5       	ldd	r24, Y+41	; 0x29
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	ac 01       	movw	r20, r24
     5bc:	4b 5f       	subi	r20, 0xFB	; 251
     5be:	5f 4f       	sbci	r21, 0xFF	; 255
     5c0:	05 2e       	mov	r0, r21
     5c2:	00 0c       	add	r0, r0
     5c4:	66 0b       	sbc	r22, r22
     5c6:	77 0b       	sbc	r23, r23
     5c8:	c4 16       	cp	r12, r20
     5ca:	d5 06       	cpc	r13, r21
     5cc:	e6 06       	cpc	r14, r22
     5ce:	f7 06       	cpc	r15, r23
     5d0:	0c f5       	brge	.+66     	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
     5d2:	4c 01       	movw	r8, r24
     5d4:	25 e0       	ldi	r18, 0x05	; 5
     5d6:	82 1a       	sub	r8, r18
     5d8:	91 08       	sbc	r9, r1
     5da:	09 2c       	mov	r0, r9
     5dc:	00 0c       	add	r0, r0
     5de:	aa 08       	sbc	r10, r10
     5e0:	bb 08       	sbc	r11, r11
     5e2:	8c 14       	cp	r8, r12
     5e4:	9d 04       	cpc	r9, r13
     5e6:	ae 04       	cpc	r10, r14
     5e8:	bf 04       	cpc	r11, r15
     5ea:	a4 f4       	brge	.+40     	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
     5ec:	20 91 9c 00 	lds	r18, 0x009C	; 0x80009c <colling_indicator>
     5f0:	21 11       	cpse	r18, r1
     5f2:	10 c0       	rjmp	.+32     	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
     5f4:	20 91 9b 00 	lds	r18, 0x009B	; 0x80009b <heating_indicator>
     5f8:	21 11       	cpse	r18, r1
     5fa:	0c c0       	rjmp	.+24     	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
     5fc:	20 91 9a 00 	lds	r18, 0x009A	; 0x80009a <Req_Temp_achieved_indicator>
     600:	21 11       	cpse	r18, r1
     602:	08 c0       	rjmp	.+16     	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
			{	Req_Temp_achieved_indicator=1;
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <Req_Temp_achieved_indicator>
				Req_Temp_achieved_counter=0;
     60a:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <Req_Temp_achieved_counter+0x1>
     60e:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <Req_Temp_achieved_counter>
     612:	bc cd       	rjmp	.-1160   	; 0x18c <main+0x92>
			}
			else if ((water_temp == (temp+5) && heating_indicator==1) || (colling_indicator==1 && water_temp == (temp-5))) //achieve the required temp
     614:	c4 16       	cp	r12, r20
     616:	d5 06       	cpc	r13, r21
     618:	e6 06       	cpc	r14, r22
     61a:	f7 06       	cpc	r15, r23
     61c:	21 f4       	brne	.+8      	; 0x626 <__EEPROM_REGION_LENGTH__+0x226>
     61e:	20 91 9b 00 	lds	r18, 0x009B	; 0x80009b <heating_indicator>
     622:	21 30       	cpi	r18, 0x01	; 1
     624:	89 f0       	breq	.+34     	; 0x648 <__EEPROM_REGION_LENGTH__+0x248>
     626:	20 91 9c 00 	lds	r18, 0x009C	; 0x80009c <colling_indicator>
     62a:	21 30       	cpi	r18, 0x01	; 1
     62c:	19 f5       	brne	.+70     	; 0x674 <__EEPROM_REGION_LENGTH__+0x274>
     62e:	4c 01       	movw	r8, r24
     630:	35 e0       	ldi	r19, 0x05	; 5
     632:	83 1a       	sub	r8, r19
     634:	91 08       	sbc	r9, r1
     636:	09 2c       	mov	r0, r9
     638:	00 0c       	add	r0, r0
     63a:	aa 08       	sbc	r10, r10
     63c:	bb 08       	sbc	r11, r11
     63e:	c8 14       	cp	r12, r8
     640:	d9 04       	cpc	r13, r9
     642:	ea 04       	cpc	r14, r10
     644:	fb 04       	cpc	r15, r11
     646:	b1 f4       	brne	.+44     	; 0x674 <__EEPROM_REGION_LENGTH__+0x274>
			{LED_vid_write(LOW_LED,Heating_Element_led);
     648:	61 e0       	ldi	r22, 0x01	; 1
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	0e 94 af 03 	call	0x75e	; 0x75e <LED_vid_write>
				COLLER_vid_write(COLLER_OFF);
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	0e 94 73 03 	call	0x6e6	; 0x6e6 <COLLER_vid_write>
				HEATER_vid_write(Heater_OFF);
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	0e 94 92 03 	call	0x724	; 0x724 <HEATER_vid_write>
				heating_indicator=0;
     65c:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <heating_indicator>
				colling_indicator=0;
     660:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <colling_indicator>
				Req_Temp_achieved_indicator=1;
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <Req_Temp_achieved_indicator>
				Req_Temp_achieved_counter=0;
     66a:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <Req_Temp_achieved_counter+0x1>
     66e:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <Req_Temp_achieved_counter>
     672:	8c cd       	rjmp	.-1256   	; 0x18c <main+0x92>
			}
			else if (water_temp < (temp-5))//cooling Element on
     674:	05 97       	sbiw	r24, 0x05	; 5
     676:	09 2e       	mov	r0, r25
     678:	00 0c       	add	r0, r0
     67a:	aa 0b       	sbc	r26, r26
     67c:	bb 0b       	sbc	r27, r27
     67e:	c8 16       	cp	r12, r24
     680:	d9 06       	cpc	r13, r25
     682:	ea 06       	cpc	r14, r26
     684:	fb 06       	cpc	r15, r27
     686:	84 f4       	brge	.+32     	; 0x6a8 <__EEPROM_REGION_LENGTH__+0x2a8>
			{	COLLER_vid_write(COLLER_OFF);
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <COLLER_vid_write>
				HEATER_vid_write(Heater_ON);
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	0e 94 92 03 	call	0x724	; 0x724 <HEATER_vid_write>
			heating_indicator=1;colling_indicator=0;
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	80 93 9b 00 	sts	0x009B, r24	; 0x80009b <heating_indicator>
     69a:	10 92 9c 00 	sts	0x009C, r1	; 0x80009c <colling_indicator>
			Req_Temp_achieved_counter=0;
     69e:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <Req_Temp_achieved_counter+0x1>
     6a2:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <Req_Temp_achieved_counter>
     6a6:	72 cd       	rjmp	.-1308   	; 0x18c <main+0x92>
			}
			else if (water_temp > (temp+5))//heating Element on
     6a8:	4c 15       	cp	r20, r12
     6aa:	5d 05       	cpc	r21, r13
     6ac:	6e 05       	cpc	r22, r14
     6ae:	7f 05       	cpc	r23, r15
     6b0:	0c f0       	brlt	.+2      	; 0x6b4 <__EEPROM_REGION_LENGTH__+0x2b4>
     6b2:	6c cd       	rjmp	.-1320   	; 0x18c <main+0x92>
			{	COLLER_vid_write(COLLER_ON);
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	0e 94 73 03 	call	0x6e6	; 0x6e6 <COLLER_vid_write>
				HEATER_vid_write(Heater_OFF);
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	0e 94 92 03 	call	0x724	; 0x724 <HEATER_vid_write>
			colling_indicator=1;heating_indicator=0;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <colling_indicator>
     6c6:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <heating_indicator>
			Req_Temp_achieved_counter=0;
     6ca:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <Req_Temp_achieved_counter+0x1>
     6ce:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <Req_Temp_achieved_counter>
     6d2:	5c cd       	rjmp	.-1352   	; 0x18c <main+0x92>

000006d4 <COLLER_vid_INT>:
#include "COLLER_config.h"
#include "COLLER_int.h"

void COLLER_vid_INT()
{
	DIO_vid_SET_PIN_DIR(COLLER_pin,OUTPUT_PIN);
     6d4:	61 e0       	ldi	r22, 0x01	; 1
     6d6:	8c e1       	ldi	r24, 0x1C	; 28
     6d8:	0e 94 ae 04 	call	0x95c	; 0x95c <DIO_vid_SET_PIN_DIR>
	DIO_VID_SET_PIN_VALUE(COLLER_pin,COLLER_OFF);
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	8c e1       	ldi	r24, 0x1C	; 28
     6e0:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <DIO_VID_SET_PIN_VALUE>
     6e4:	08 95       	ret

000006e6 <COLLER_vid_write>:
}
void COLLER_vid_write(uint8 u8COLLER_stat)
{
	DIO_VID_SET_PIN_VALUE(COLLER_pin,u8COLLER_stat);
     6e6:	68 2f       	mov	r22, r24
     6e8:	8c e1       	ldi	r24, 0x1C	; 28
     6ea:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <DIO_VID_SET_PIN_VALUE>
     6ee:	08 95       	ret

000006f0 <EEPROM_voidInit>:
#include "TWI_interface.h"
#include "EEPROM_int.h"

void EEPROM_voidInit (void)
{
	TWI_voidMasterInit();
     6f0:	0e 94 cb 05 	call	0xb96	; 0xb96 <TWI_voidMasterInit>
     6f4:	08 95       	ret

000006f6 <EEPROM_SendData>:
}
//write data on EEPROM by TWI
void EEPROM_SendData(uint16 Copy_u16Adress,uint8 Copy_u8Data)
{
	EEPROM_SendDataByte(Copy_u16Adress,Copy_u8Data);
     6f6:	0e 94 45 06 	call	0xc8a	; 0xc8a <EEPROM_SendDataByte>
     6fa:	08 95       	ret

000006fc <EEPROM_ReadData>:
}

//Read data from EEPROM by TWI
void EEPROM_ReadData(uint16 Copy_u16Adress,uint8 *Copy_pu8Data)
{
	EEPROM_ReadDataByte(Copy_u16Adress,Copy_pu8Data);
     6fc:	0e 94 72 06 	call	0xce4	; 0xce4 <EEPROM_ReadDataByte>
     700:	08 95       	ret

00000702 <EXT_ADC_vid_int>:
#include "SERV_BITMATH.h"
#include "ADC_int.h"
#include "EXT_ADC_int.h"

void EXT_ADC_vid_int()
{	 ADC_vid_int();
     702:	0e 94 88 04 	call	0x910	; 0x910 <ADC_vid_int>
	 ADC_vid_Enable();
     706:	0e 94 aa 04 	call	0x954	; 0x954 <ADC_vid_Enable>
     70a:	08 95       	ret

0000070c <EXT_ADC_u16ReadDigitalVal>:
}
uint16 EXT_ADC_u16ReadDigitalVal(CHANNEL ChannelCopy)
{
	return ADC_u16ReadDigitalVal(ChannelCopy);
     70c:	0e 94 98 04 	call	0x930	; 0x930 <ADC_u16ReadDigitalVal>
}
     710:	08 95       	ret

00000712 <HEATER_vid_INT>:
#include "HEATER_config.h"
#include "HEATER_int.h"

void HEATER_vid_INT()
{
	DIO_vid_SET_PIN_DIR(heater_pin,OUTPUT_PIN);
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	8d e1       	ldi	r24, 0x1D	; 29
     716:	0e 94 ae 04 	call	0x95c	; 0x95c <DIO_vid_SET_PIN_DIR>
	DIO_VID_SET_PIN_VALUE(heater_pin,Heater_OFF);
     71a:	60 e0       	ldi	r22, 0x00	; 0
     71c:	8d e1       	ldi	r24, 0x1D	; 29
     71e:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <DIO_VID_SET_PIN_VALUE>
     722:	08 95       	ret

00000724 <HEATER_vid_write>:
}
void HEATER_vid_write(uint8 u8HEATER_stat)
{
	DIO_VID_SET_PIN_VALUE(heater_pin,u8HEATER_stat);
     724:	68 2f       	mov	r22, r24
     726:	8d e1       	ldi	r24, 0x1D	; 29
     728:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <DIO_VID_SET_PIN_VALUE>
     72c:	08 95       	ret

0000072e <LED_vid_INT>:
#include "LED_config.h"
#include "LED_int.h"
 extern uint8 LED_pin[LED_NUM];
	
 uint8 error;//i the number of the led
void LED_vid_INT(uint8 LED_order){
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
	if (LED_order<=LED_NUM)
     732:	83 30       	cpi	r24, 0x03	; 3
     734:	70 f4       	brcc	.+28     	; 0x752 <LED_vid_INT+0x24>
		{
		LED_order--;//cause led_1 ---> 0
     736:	81 50       	subi	r24, 0x01	; 1
	DIO_vid_SET_PIN_DIR(LED_pin[LED_order],OUTPUT_PIN);
     738:	c8 2f       	mov	r28, r24
     73a:	d0 e0       	ldi	r29, 0x00	; 0
     73c:	c0 5a       	subi	r28, 0xA0	; 160
     73e:	df 4f       	sbci	r29, 0xFF	; 255
     740:	61 e0       	ldi	r22, 0x01	; 1
     742:	88 81       	ld	r24, Y
     744:	0e 94 ae 04 	call	0x95c	; 0x95c <DIO_vid_SET_PIN_DIR>
	DIO_VID_SET_PIN_VALUE(LED_pin[LED_order],LOW_PIN);//initialization value
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	88 81       	ld	r24, Y
     74c:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <DIO_VID_SET_PIN_VALUE>
     750:	03 c0       	rjmp	.+6      	; 0x758 <LED_vid_INT+0x2a>
		}else{error=3;};
     752:	83 e0       	ldi	r24, 0x03	; 3
     754:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <error>
			} //function to link with the MC pins and initialize it
     758:	df 91       	pop	r29
     75a:	cf 91       	pop	r28
     75c:	08 95       	ret

0000075e <LED_vid_write>:
void LED_vid_write(uint8 u8LED_stat,uint8 LED_order){
		if (LED_order<=LED_NUM)
     75e:	63 30       	cpi	r22, 0x03	; 3
     760:	50 f4       	brcc	.+20     	; 0x776 <LED_vid_write+0x18>
     762:	e6 2f       	mov	r30, r22
     764:	68 2f       	mov	r22, r24
		{
		LED_order--;//cause led_1 ---> 0
     766:	e1 50       	subi	r30, 0x01	; 1
	DIO_VID_SET_PIN_VALUE(LED_pin[LED_order],u8LED_stat);
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	e0 5a       	subi	r30, 0xA0	; 160
     76c:	ff 4f       	sbci	r31, 0xFF	; 255
     76e:	80 81       	ld	r24, Z
     770:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <DIO_VID_SET_PIN_VALUE>
     774:	08 95       	ret
		}else{error=3;};	
     776:	83 e0       	ldi	r24, 0x03	; 3
     778:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <error>
     77c:	08 95       	ret

0000077e <SE7_seg_vid_int>:
//in different ports
extern uint8 SE7_seg_port[(seven_7_seg_Num*7)];
uint8 u8se7_seg_NUMs_x[11] = {0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F,0x00};//the 7_segment numbers in hex shape
// 8 pins
//i the number of 7_segment
void SE7_seg_vid_int(uint8 i){
     77e:	0f 93       	push	r16
     780:	1f 93       	push	r17
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
		uint8 j;//counter to pins
		if (i<=seven_7_seg_Num)
     786:	83 30       	cpi	r24, 0x03	; 3
     788:	40 f5       	brcc	.+80     	; 0x7da <SE7_seg_vid_int+0x5c>
		{i--;
     78a:	0f ef       	ldi	r16, 0xFF	; 255
     78c:	08 0f       	add	r16, r24
			for (j=(i*7);j<=(7+i*7);j++)
     78e:	10 2f       	mov	r17, r16
     790:	11 0f       	add	r17, r17
     792:	11 0f       	add	r17, r17
     794:	11 0f       	add	r17, r17
     796:	10 1b       	sub	r17, r16
     798:	0c c0       	rjmp	.+24     	; 0x7b2 <SE7_seg_vid_int+0x34>
			{
				DIO_vid_SET_PIN_DIR(SE7_seg_port[j],OUTPUT_PIN);
     79a:	e9 01       	movw	r28, r18
     79c:	ce 59       	subi	r28, 0x9E	; 158
     79e:	df 4f       	sbci	r29, 0xFF	; 255
     7a0:	61 e0       	ldi	r22, 0x01	; 1
     7a2:	88 81       	ld	r24, Y
     7a4:	0e 94 ae 04 	call	0x95c	; 0x95c <DIO_vid_SET_PIN_DIR>
				DIO_VID_SET_PIN_VALUE(SE7_seg_port[j],LOW_PIN);
     7a8:	60 e0       	ldi	r22, 0x00	; 0
     7aa:	88 81       	ld	r24, Y
     7ac:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <DIO_VID_SET_PIN_VALUE>
//i the number of 7_segment
void SE7_seg_vid_int(uint8 i){
		uint8 j;//counter to pins
		if (i<=seven_7_seg_Num)
		{i--;
			for (j=(i*7);j<=(7+i*7);j++)
     7b0:	1f 5f       	subi	r17, 0xFF	; 255
     7b2:	21 2f       	mov	r18, r17
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	40 2f       	mov	r20, r16
     7b8:	50 e0       	ldi	r21, 0x00	; 0
     7ba:	4f 5f       	subi	r20, 0xFF	; 255
     7bc:	5f 4f       	sbci	r21, 0xFF	; 255
     7be:	ba 01       	movw	r22, r20
     7c0:	66 0f       	add	r22, r22
     7c2:	77 1f       	adc	r23, r23
     7c4:	66 0f       	add	r22, r22
     7c6:	77 1f       	adc	r23, r23
     7c8:	66 0f       	add	r22, r22
     7ca:	77 1f       	adc	r23, r23
     7cc:	cb 01       	movw	r24, r22
     7ce:	84 1b       	sub	r24, r20
     7d0:	95 0b       	sbc	r25, r21
     7d2:	82 17       	cp	r24, r18
     7d4:	93 07       	cpc	r25, r19
     7d6:	0c f7       	brge	.-62     	; 0x79a <SE7_seg_vid_int+0x1c>
     7d8:	03 c0       	rjmp	.+6      	; 0x7e0 <SE7_seg_vid_int+0x62>
			{
				DIO_vid_SET_PIN_DIR(SE7_seg_port[j],OUTPUT_PIN);
				DIO_VID_SET_PIN_VALUE(SE7_seg_port[j],LOW_PIN);
			}
			}else{error=3;}
     7da:	83 e0       	ldi	r24, 0x03	; 3
     7dc:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <error>
	
	}//to determine the direction and initial value of the port or pins of  7_seg
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	1f 91       	pop	r17
     7e6:	0f 91       	pop	r16
     7e8:	08 95       	ret

000007ea <SE7_seg_vid_write>:
void SE7_seg_vid_write(uint8 u8seg_NUM,uint8 i){
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
	uint8 j,k;//j counter for pins of port
	//k to make shifting
	if (i<=seven_7_seg_Num){
     7f0:	63 30       	cpi	r22, 0x03	; 3
     7f2:	10 f5       	brcc	.+68     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     7f4:	18 2f       	mov	r17, r24
		i--;
     7f6:	61 50       	subi	r22, 0x01	; 1
		for (j=(i*7),k=0;j<=(7+i*7),k<=6;j++,k++)
     7f8:	d6 2f       	mov	r29, r22
     7fa:	dd 0f       	add	r29, r29
     7fc:	dd 0f       	add	r29, r29
     7fe:	dd 0f       	add	r29, r29
     800:	d6 1b       	sub	r29, r22
     802:	c0 e0       	ldi	r28, 0x00	; 0
     804:	16 c0       	rjmp	.+44     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
		{
			DIO_VID_SET_PIN_VALUE(SE7_seg_port[j],GET_pin(u8se7_seg_NUMs_x[u8seg_NUM],k));
     806:	e1 2f       	mov	r30, r17
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	e0 59       	subi	r30, 0x90	; 144
     80c:	ff 4f       	sbci	r31, 0xFF	; 255
     80e:	60 81       	ld	r22, Z
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	0c 2e       	mov	r0, r28
     814:	02 c0       	rjmp	.+4      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     816:	75 95       	asr	r23
     818:	67 95       	ror	r22
     81a:	0a 94       	dec	r0
     81c:	e2 f7       	brpl	.-8      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     81e:	61 70       	andi	r22, 0x01	; 1
     820:	ed 2f       	mov	r30, r29
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	ee 59       	subi	r30, 0x9E	; 158
     826:	ff 4f       	sbci	r31, 0xFF	; 255
     828:	80 81       	ld	r24, Z
     82a:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <DIO_VID_SET_PIN_VALUE>
void SE7_seg_vid_write(uint8 u8seg_NUM,uint8 i){
	uint8 j,k;//j counter for pins of port
	//k to make shifting
	if (i<=seven_7_seg_Num){
		i--;
		for (j=(i*7),k=0;j<=(7+i*7),k<=6;j++,k++)
     82e:	df 5f       	subi	r29, 0xFF	; 255
     830:	cf 5f       	subi	r28, 0xFF	; 255
     832:	c7 30       	cpi	r28, 0x07	; 7
     834:	40 f3       	brcs	.-48     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     836:	03 c0       	rjmp	.+6      	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
		{
			DIO_VID_SET_PIN_VALUE(SE7_seg_port[j],GET_pin(u8se7_seg_NUMs_x[u8seg_NUM],k));
		}}else{error=3;}
     838:	83 e0       	ldi	r24, 0x03	; 3
     83a:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <error>
	
	//to write the number on  7_seg
	}
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	08 95       	ret

00000846 <SW_vid_INT>:
#include "SW_config.h"
#include "SW_int.h"

extern uint8 SW_pin[SW_N];
uint8 error=0;//i the number of the SW
void SW_vid_INT(uint8 i){
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
	if (i<=SW_N)
     84a:	84 30       	cpi	r24, 0x04	; 4
     84c:	70 f4       	brcc	.+28     	; 0x86a <__stack+0xb>
	{
	i--;//cause SW_1 ---> 0
     84e:	81 50       	subi	r24, 0x01	; 1
	DIO_vid_SET_PIN_DIR(SW_pin[i],INPUT_PIN);
     850:	c8 2f       	mov	r28, r24
     852:	d0 e0       	ldi	r29, 0x00	; 0
     854:	c5 58       	subi	r28, 0x85	; 133
     856:	df 4f       	sbci	r29, 0xFF	; 255
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	88 81       	ld	r24, Y
     85c:	0e 94 ae 04 	call	0x95c	; 0x95c <DIO_vid_SET_PIN_DIR>
	DIO_VID_SET_PIN_VALUE(SW_pin[i],HIGH_PIN);//internal pull up
     860:	61 e0       	ldi	r22, 0x01	; 1
     862:	88 81       	ld	r24, Y
     864:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <DIO_VID_SET_PIN_VALUE>
     868:	03 c0       	rjmp	.+6      	; 0x870 <__stack+0x11>
	}else{error=3;};
     86a:	83 e0       	ldi	r24, 0x03	; 3
     86c:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <error>
}
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	08 95       	ret

00000876 <SW_u8_reed>:
	
uint8 SW_u8_reed(uint8 i){
		if (i<=SW_N)
     876:	84 30       	cpi	r24, 0x04	; 4
     878:	48 f4       	brcc	.+18     	; 0x88c <SW_u8_reed+0x16>
		{
	i--;//cause SW_1 ---> 0
     87a:	81 50       	subi	r24, 0x01	; 1
	return DIO_U8_GET_PIN_VALUE(SW_pin[i]);
     87c:	e8 2f       	mov	r30, r24
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	e5 58       	subi	r30, 0x85	; 133
     882:	ff 4f       	sbci	r31, 0xFF	; 255
     884:	80 81       	ld	r24, Z
     886:	0e 94 42 05 	call	0xa84	; 0xa84 <DIO_U8_GET_PIN_VALUE>
     88a:	08 95       	ret
		}else{error=3;};
     88c:	83 e0       	ldi	r24, 0x03	; 3
     88e:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <error>
     892:	08 95       	ret

00000894 <TIMER_vid_int>:
#include "TIMER0_int.h"
#include "TIMER_int.h"

void TIMER_vid_int(void)//interface & initialization
{
	TIMER0_vid_int();
     894:	0e 94 ab 05 	call	0xb56	; 0xb56 <TIMER0_vid_int>
     898:	08 95       	ret

0000089a <TIMER_vid_Start>:
}

void TIMER_vid_Start(void)//start timer
{
	TIMER0_vid_Start();
     89a:	0e 94 b5 05 	call	0xb6a	; 0xb6a <TIMER0_vid_Start>
     89e:	08 95       	ret

000008a0 <TIMER_vid_Stop>:
}
void TIMER_vid_Stop(void)//Stop timer
{
	TIMER0_vid_Stop();
     8a0:	0e 94 bc 05 	call	0xb78	; 0xb78 <TIMER0_vid_Stop>
     8a4:	08 95       	ret

000008a6 <TIMER_vid_Reset>:
}
void TIMER_vid_Reset(void)//Reset timer
{
	TIMER0_vid_Reset();
     8a6:	0e 94 c0 05 	call	0xb80	; 0xb80 <TIMER0_vid_Reset>
     8aa:	08 95       	ret

000008ac <TIMER_vid_Write_COMP_OCR0>:
}

void TIMER_vid_Write_COMP_OCR0(uint8 Copy_Start_Value)//comparing value to write the ocr
{
	TIMER0_vid_Write_COMP_OCR0(Copy_Start_Value);
     8ac:	0e 94 c2 05 	call	0xb84	; 0xb84 <TIMER0_vid_Write_COMP_OCR0>
     8b0:	08 95       	ret

000008b2 <TIMER_vid_COMP_Interrupt_Enable>:
}

//INT enable
void TIMER_vid_COMP_Interrupt_Enable(void)//comparing INT enable
{
	TIMER0_vid_COMP_Interrupt_Enable();
     8b2:	0e 94 c4 05 	call	0xb88	; 0xb88 <TIMER0_vid_COMP_Interrupt_Enable>
     8b6:	08 95       	ret

000008b8 <timer_isr_fun>:
}

void timer_isr_fun(void (*fun)(void))
{
	TIMER0_CTC_INT=fun;
     8b8:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <TIMER0_CTC_INT+0x1>
     8bc:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <TIMER0_CTC_INT>
     8c0:	08 95       	ret

000008c2 <__vector_16>:
#define ISR(vector)  															\
void vector(void)	__attribute__((signal,used,externally_visible));		    \
void vector(void)

ISR(__vector_16)//the ADC  index in vector table
{
     8c2:	1f 92       	push	r1
     8c4:	0f 92       	push	r0
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	0f 92       	push	r0
     8ca:	11 24       	eor	r1, r1
     8cc:	2f 93       	push	r18
     8ce:	3f 93       	push	r19
     8d0:	4f 93       	push	r20
     8d2:	5f 93       	push	r21
     8d4:	6f 93       	push	r22
     8d6:	7f 93       	push	r23
     8d8:	8f 93       	push	r24
     8da:	9f 93       	push	r25
     8dc:	af 93       	push	r26
     8de:	bf 93       	push	r27
     8e0:	ef 93       	push	r30
     8e2:	ff 93       	push	r31
	ISR_ADC_INT();
     8e4:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <ISR_ADC_INT>
     8e8:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <ISR_ADC_INT+0x1>
     8ec:	09 95       	icall
}
     8ee:	ff 91       	pop	r31
     8f0:	ef 91       	pop	r30
     8f2:	bf 91       	pop	r27
     8f4:	af 91       	pop	r26
     8f6:	9f 91       	pop	r25
     8f8:	8f 91       	pop	r24
     8fa:	7f 91       	pop	r23
     8fc:	6f 91       	pop	r22
     8fe:	5f 91       	pop	r21
     900:	4f 91       	pop	r20
     902:	3f 91       	pop	r19
     904:	2f 91       	pop	r18
     906:	0f 90       	pop	r0
     908:	0f be       	out	0x3f, r0	; 63
     90a:	0f 90       	pop	r0
     90c:	1f 90       	pop	r1
     90e:	18 95       	reti

00000910 <ADC_vid_int>:
	CLEAR_pin(ADMUX,REFS1);
	#elif ADC_VOLT_source == ADC_AVCC
	SET_pin(ADMUX,REFS0);
	CLEAR_pin(ADMUX,REFS1);
	#elif ADC_VOLT_source == ADC_INTERNAL
	SET_pin(ADMUX,REFS0);
     910:	87 b1       	in	r24, 0x07	; 7
     912:	80 64       	ori	r24, 0x40	; 64
     914:	87 b9       	out	0x07, r24	; 7
	SET_pin(ADMUX,REFS1);
     916:	87 b1       	in	r24, 0x07	; 7
     918:	80 68       	ori	r24, 0x80	; 128
     91a:	87 b9       	out	0x07, r24	; 7
	#endif
	
	//determine the ADC ADJUSTMENT
	#if ADC_ADJUSTMENT == ADC_Right_ADJUSTMENT
		CLEAR_pin(ADMUX,ADLAR);   // RIGHT the default
     91c:	87 b1       	in	r24, 0x07	; 7
     91e:	8f 7d       	andi	r24, 0xDF	; 223
     920:	87 b9       	out	0x07, r24	; 7
	#elif ADC_ADJUSTMENT == ADC_Left_ADJUSTMENT
		SET_pin(ADMUX,ADLAR);   // left
	#endif		
	
	SET_pin(ADCSRA,ADEN);  // Enable Pin
     922:	86 b1       	in	r24, 0x06	; 6
     924:	80 68       	ori	r24, 0x80	; 128
     926:	86 b9       	out	0x06, r24	; 6
	
	ADCSRA |= ADC_PRESCALER; //Pre_scaler
     928:	86 b1       	in	r24, 0x06	; 6
     92a:	86 60       	ori	r24, 0x06	; 6
     92c:	86 b9       	out	0x06, r24	; 6
     92e:	08 95       	ret

00000930 <ADC_u16ReadDigitalVal>:
}

uint16 ADC_u16ReadDigitalVal(ADC_CHANNEL ChannelCopy)
{		
		uint16 DigitalVal=0;
		ADMUX &= ADC_CLEAR_MASK;
     930:	97 b1       	in	r25, 0x07	; 7
     932:	90 7e       	andi	r25, 0xE0	; 224
     934:	97 b9       	out	0x07, r25	; 7
		ADMUX |= ChannelCopy;
     936:	97 b1       	in	r25, 0x07	; 7
     938:	89 2b       	or	r24, r25
     93a:	87 b9       	out	0x07, r24	; 7
		SET_pin(ADCSRA,ADSC);
     93c:	86 b1       	in	r24, 0x06	; 6
     93e:	80 64       	ori	r24, 0x40	; 64
     940:	86 b9       	out	0x06, r24	; 6
		
		while((GET_pin(ADCSRA,ADSC)));//to wait until the conversion end
     942:	36 99       	sbic	0x06, 6	; 6
     944:	fe cf       	rjmp	.-4      	; 0x942 <ADC_u16ReadDigitalVal+0x12>
		
		#if ADC_ADJUSTMENT == ADC_Right_ADJUSTMENT
				DigitalVal = ADCL;
     946:	24 b1       	in	r18, 0x04	; 4
				DigitalVal |= (ADCH << 8);
     948:	85 b1       	in	r24, 0x05	; 5
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	98 2f       	mov	r25, r24
     94e:	88 27       	eor	r24, r24
		#elif ADC_ADJUSTMENT == ADC_Left_ADJUSTMENT
				DigitalVal = 0x00;
				DigitalVal |= (ADCH << 2);
		#endif
		return DigitalVal;
}
     950:	82 2b       	or	r24, r18
     952:	08 95       	ret

00000954 <ADC_vid_Enable>:

void ADC_vid_Enable()
{
	SET_pin(ADCSRA,ADEN);
     954:	86 b1       	in	r24, 0x06	; 6
     956:	80 68       	ori	r24, 0x80	; 128
     958:	86 b9       	out	0x06, r24	; 6
     95a:	08 95       	ret

0000095c <DIO_vid_SET_PIN_DIR>:

// functions for pin in second way
void DIO_vid_SET_PIN_DIR (uint8 u8PIN_NUM,uint8 u8PIN_DIR)// determine the direction of the PIN
			//u8PIN_NUM the pin number(0-31)
			//u8PIN_DIR (input pin,output pin)
			{	if (0<= u8PIN_NUM&&u8PIN_NUM <=31)
     95c:	80 32       	cpi	r24, 0x20	; 32
     95e:	c8 f5       	brcc	.+114    	; 0x9d2 <DIO_vid_SET_PIN_DIR+0x76>
				{switch (u8PIN_DIR)
     960:	66 23       	and	r22, r22
     962:	19 f0       	breq	.+6      	; 0x96a <DIO_vid_SET_PIN_DIR+0xe>
     964:	61 30       	cpi	r22, 0x01	; 1
     966:	e1 f0       	breq	.+56     	; 0x9a0 <DIO_vid_SET_PIN_DIR+0x44>
     968:	08 95       	ret
					{
						case 0://INPUT PIN
						CLEAR_pin(*DIR_REG_Address[u8PIN_NUM/8],(u8PIN_NUM%8));
     96a:	e8 2f       	mov	r30, r24
     96c:	e6 95       	lsr	r30
     96e:	e6 95       	lsr	r30
     970:	e6 95       	lsr	r30
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	ee 0f       	add	r30, r30
     976:	ff 1f       	adc	r31, r31
     978:	e2 57       	subi	r30, 0x72	; 114
     97a:	ff 4f       	sbci	r31, 0xFF	; 255
     97c:	01 90       	ld	r0, Z+
     97e:	f0 81       	ld	r31, Z
     980:	e0 2d       	mov	r30, r0
     982:	40 81       	ld	r20, Z
     984:	87 70       	andi	r24, 0x07	; 7
     986:	21 e0       	ldi	r18, 0x01	; 1
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	b9 01       	movw	r22, r18
     98c:	02 c0       	rjmp	.+4      	; 0x992 <DIO_vid_SET_PIN_DIR+0x36>
     98e:	66 0f       	add	r22, r22
     990:	77 1f       	adc	r23, r23
     992:	8a 95       	dec	r24
     994:	e2 f7       	brpl	.-8      	; 0x98e <DIO_vid_SET_PIN_DIR+0x32>
     996:	cb 01       	movw	r24, r22
     998:	80 95       	com	r24
     99a:	84 23       	and	r24, r20
     99c:	80 83       	st	Z, r24
						break;
     99e:	08 95       	ret
						case 1://OUTPUT PIN
						SET_pin(*DIR_REG_Address[u8PIN_NUM/8],(u8PIN_NUM%8));
     9a0:	e8 2f       	mov	r30, r24
     9a2:	e6 95       	lsr	r30
     9a4:	e6 95       	lsr	r30
     9a6:	e6 95       	lsr	r30
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	ee 0f       	add	r30, r30
     9ac:	ff 1f       	adc	r31, r31
     9ae:	e2 57       	subi	r30, 0x72	; 114
     9b0:	ff 4f       	sbci	r31, 0xFF	; 255
     9b2:	01 90       	ld	r0, Z+
     9b4:	f0 81       	ld	r31, Z
     9b6:	e0 2d       	mov	r30, r0
     9b8:	40 81       	ld	r20, Z
     9ba:	87 70       	andi	r24, 0x07	; 7
     9bc:	21 e0       	ldi	r18, 0x01	; 1
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	b9 01       	movw	r22, r18
     9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <DIO_vid_SET_PIN_DIR+0x6c>
     9c4:	66 0f       	add	r22, r22
     9c6:	77 1f       	adc	r23, r23
     9c8:	8a 95       	dec	r24
     9ca:	e2 f7       	brpl	.-8      	; 0x9c4 <DIO_vid_SET_PIN_DIR+0x68>
     9cc:	cb 01       	movw	r24, r22
     9ce:	84 2b       	or	r24, r20
     9d0:	80 83       	st	Z, r24
     9d2:	08 95       	ret

000009d4 <DIO_VID_SET_PIN_VALUE>:
					}else{}}
						
void DIO_VID_SET_PIN_VALUE (uint8 u8PIN_NUM,uint8 u8PIN_VALUE){// determine the value to write on the PIN
			//u8PIN_NUM the pin number(0-31)
			//u8PIN_VALUE the pin value (high pin,low pin,toggle pin)
				if (0<= u8PIN_NUM&&u8PIN_NUM <=31)
     9d4:	80 32       	cpi	r24, 0x20	; 32
     9d6:	08 f0       	brcs	.+2      	; 0x9da <DIO_VID_SET_PIN_VALUE+0x6>
     9d8:	54 c0       	rjmp	.+168    	; 0xa82 <DIO_VID_SET_PIN_VALUE+0xae>
				{switch (u8PIN_VALUE)
     9da:	61 30       	cpi	r22, 0x01	; 1
     9dc:	f9 f0       	breq	.+62     	; 0xa1c <DIO_VID_SET_PIN_VALUE+0x48>
     9de:	18 f0       	brcs	.+6      	; 0x9e6 <DIO_VID_SET_PIN_VALUE+0x12>
     9e0:	62 30       	cpi	r22, 0x02	; 2
     9e2:	b1 f1       	breq	.+108    	; 0xa50 <DIO_VID_SET_PIN_VALUE+0x7c>
     9e4:	08 95       	ret
					{
						case 0://LOW PIN
						CLEAR_pin(*PORT_REG_Address[u8PIN_NUM/8],(u8PIN_NUM%8));
     9e6:	e8 2f       	mov	r30, r24
     9e8:	e6 95       	lsr	r30
     9ea:	e6 95       	lsr	r30
     9ec:	e6 95       	lsr	r30
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	ee 0f       	add	r30, r30
     9f2:	ff 1f       	adc	r31, r31
     9f4:	ea 57       	subi	r30, 0x7A	; 122
     9f6:	ff 4f       	sbci	r31, 0xFF	; 255
     9f8:	01 90       	ld	r0, Z+
     9fa:	f0 81       	ld	r31, Z
     9fc:	e0 2d       	mov	r30, r0
     9fe:	40 81       	ld	r20, Z
     a00:	87 70       	andi	r24, 0x07	; 7
     a02:	21 e0       	ldi	r18, 0x01	; 1
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	b9 01       	movw	r22, r18
     a08:	02 c0       	rjmp	.+4      	; 0xa0e <DIO_VID_SET_PIN_VALUE+0x3a>
     a0a:	66 0f       	add	r22, r22
     a0c:	77 1f       	adc	r23, r23
     a0e:	8a 95       	dec	r24
     a10:	e2 f7       	brpl	.-8      	; 0xa0a <DIO_VID_SET_PIN_VALUE+0x36>
     a12:	cb 01       	movw	r24, r22
     a14:	80 95       	com	r24
     a16:	84 23       	and	r24, r20
     a18:	80 83       	st	Z, r24
						break;
     a1a:	08 95       	ret
						case 1://HIGH PIN
						SET_pin(*PORT_REG_Address[u8PIN_NUM/8],(u8PIN_NUM%8));
     a1c:	e8 2f       	mov	r30, r24
     a1e:	e6 95       	lsr	r30
     a20:	e6 95       	lsr	r30
     a22:	e6 95       	lsr	r30
     a24:	f0 e0       	ldi	r31, 0x00	; 0
     a26:	ee 0f       	add	r30, r30
     a28:	ff 1f       	adc	r31, r31
     a2a:	ea 57       	subi	r30, 0x7A	; 122
     a2c:	ff 4f       	sbci	r31, 0xFF	; 255
     a2e:	01 90       	ld	r0, Z+
     a30:	f0 81       	ld	r31, Z
     a32:	e0 2d       	mov	r30, r0
     a34:	40 81       	ld	r20, Z
     a36:	87 70       	andi	r24, 0x07	; 7
     a38:	21 e0       	ldi	r18, 0x01	; 1
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	b9 01       	movw	r22, r18
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <DIO_VID_SET_PIN_VALUE+0x70>
     a40:	66 0f       	add	r22, r22
     a42:	77 1f       	adc	r23, r23
     a44:	8a 95       	dec	r24
     a46:	e2 f7       	brpl	.-8      	; 0xa40 <DIO_VID_SET_PIN_VALUE+0x6c>
     a48:	cb 01       	movw	r24, r22
     a4a:	84 2b       	or	r24, r20
     a4c:	80 83       	st	Z, r24
						break;
     a4e:	08 95       	ret
						case 2://toggle pin
						TOGGLE_pin(*PORT_REG_Address[u8PIN_NUM/8],(u8PIN_NUM%8));
     a50:	e8 2f       	mov	r30, r24
     a52:	e6 95       	lsr	r30
     a54:	e6 95       	lsr	r30
     a56:	e6 95       	lsr	r30
     a58:	f0 e0       	ldi	r31, 0x00	; 0
     a5a:	ee 0f       	add	r30, r30
     a5c:	ff 1f       	adc	r31, r31
     a5e:	ea 57       	subi	r30, 0x7A	; 122
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	01 90       	ld	r0, Z+
     a64:	f0 81       	ld	r31, Z
     a66:	e0 2d       	mov	r30, r0
     a68:	40 81       	ld	r20, Z
     a6a:	87 70       	andi	r24, 0x07	; 7
     a6c:	21 e0       	ldi	r18, 0x01	; 1
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	b9 01       	movw	r22, r18
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <DIO_VID_SET_PIN_VALUE+0xa4>
     a74:	66 0f       	add	r22, r22
     a76:	77 1f       	adc	r23, r23
     a78:	8a 95       	dec	r24
     a7a:	e2 f7       	brpl	.-8      	; 0xa74 <DIO_VID_SET_PIN_VALUE+0xa0>
     a7c:	cb 01       	movw	r24, r22
     a7e:	84 27       	eor	r24, r20
     a80:	80 83       	st	Z, r24
     a82:	08 95       	ret

00000a84 <DIO_U8_GET_PIN_VALUE>:
					}
					}else{}}
uint8 DIO_U8_GET_PIN_VALUE (uint8 u8PIN_NUM){// get the value was red from the PIN
			//u8PIN_NUM the pin number(0-31)
			uint8 pin_red_value=0;// the value red from the port
			if (0<= u8PIN_NUM&&u8PIN_NUM <=31)
     a84:	80 32       	cpi	r24, 0x20	; 32
     a86:	c0 f4       	brcc	.+48     	; 0xab8 <DIO_U8_GET_PIN_VALUE+0x34>
			{
				pin_red_value=GET_pin(* PIN_REG_Address[(u8PIN_NUM/8)],(u8PIN_NUM%8));
     a88:	e8 2f       	mov	r30, r24
     a8a:	e6 95       	lsr	r30
     a8c:	e6 95       	lsr	r30
     a8e:	e6 95       	lsr	r30
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	ee 0f       	add	r30, r30
     a94:	ff 1f       	adc	r31, r31
     a96:	e2 58       	subi	r30, 0x82	; 130
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	01 90       	ld	r0, Z+
     a9c:	f0 81       	ld	r31, Z
     a9e:	e0 2d       	mov	r30, r0
     aa0:	90 81       	ld	r25, Z
     aa2:	28 2f       	mov	r18, r24
     aa4:	27 70       	andi	r18, 0x07	; 7
     aa6:	89 2f       	mov	r24, r25
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <DIO_U8_GET_PIN_VALUE+0x2c>
     aac:	95 95       	asr	r25
     aae:	87 95       	ror	r24
     ab0:	2a 95       	dec	r18
     ab2:	e2 f7       	brpl	.-8      	; 0xaac <DIO_U8_GET_PIN_VALUE+0x28>
     ab4:	81 70       	andi	r24, 0x01	; 1
				return pin_red_value;
     ab6:	08 95       	ret
     ab8:	08 95       	ret

00000aba <__vector_11>:
}


void TIMER0_vid_OVR_Interrupt_Disable(void)//overflow INT disable
{
	CLEAR_pin(TIMSK,TOIE0);
     aba:	1f 92       	push	r1
     abc:	0f 92       	push	r0
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	0f 92       	push	r0
     ac2:	11 24       	eor	r1, r1
     ac4:	2f 93       	push	r18
     ac6:	3f 93       	push	r19
     ac8:	4f 93       	push	r20
     aca:	5f 93       	push	r21
     acc:	6f 93       	push	r22
     ace:	7f 93       	push	r23
     ad0:	8f 93       	push	r24
     ad2:	9f 93       	push	r25
     ad4:	af 93       	push	r26
     ad6:	bf 93       	push	r27
     ad8:	ef 93       	push	r30
     ada:	ff 93       	push	r31
     adc:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <TIMER0_OVF_INT>
     ae0:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <TIMER0_OVF_INT+0x1>
     ae4:	09 95       	icall
     ae6:	ff 91       	pop	r31
     ae8:	ef 91       	pop	r30
     aea:	bf 91       	pop	r27
     aec:	af 91       	pop	r26
     aee:	9f 91       	pop	r25
     af0:	8f 91       	pop	r24
     af2:	7f 91       	pop	r23
     af4:	6f 91       	pop	r22
     af6:	5f 91       	pop	r21
     af8:	4f 91       	pop	r20
     afa:	3f 91       	pop	r19
     afc:	2f 91       	pop	r18
     afe:	0f 90       	pop	r0
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	0f 90       	pop	r0
     b04:	1f 90       	pop	r1
     b06:	18 95       	reti

00000b08 <__vector_10>:
     b08:	1f 92       	push	r1
     b0a:	0f 92       	push	r0
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	0f 92       	push	r0
     b10:	11 24       	eor	r1, r1
     b12:	2f 93       	push	r18
     b14:	3f 93       	push	r19
     b16:	4f 93       	push	r20
     b18:	5f 93       	push	r21
     b1a:	6f 93       	push	r22
     b1c:	7f 93       	push	r23
     b1e:	8f 93       	push	r24
     b20:	9f 93       	push	r25
     b22:	af 93       	push	r26
     b24:	bf 93       	push	r27
     b26:	ef 93       	push	r30
     b28:	ff 93       	push	r31
     b2a:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <TIMER0_CTC_INT>
     b2e:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <TIMER0_CTC_INT+0x1>
     b32:	09 95       	icall
     b34:	ff 91       	pop	r31
     b36:	ef 91       	pop	r30
     b38:	bf 91       	pop	r27
     b3a:	af 91       	pop	r26
     b3c:	9f 91       	pop	r25
     b3e:	8f 91       	pop	r24
     b40:	7f 91       	pop	r23
     b42:	6f 91       	pop	r22
     b44:	5f 91       	pop	r21
     b46:	4f 91       	pop	r20
     b48:	3f 91       	pop	r19
     b4a:	2f 91       	pop	r18
     b4c:	0f 90       	pop	r0
     b4e:	0f be       	out	0x3f, r0	; 63
     b50:	0f 90       	pop	r0
     b52:	1f 90       	pop	r1
     b54:	18 95       	reti

00000b56 <TIMER0_vid_int>:
     b56:	13 be       	out	0x33, r1	; 51
     b58:	83 b7       	in	r24, 0x33	; 51
     b5a:	8f 7b       	andi	r24, 0xBF	; 191
     b5c:	83 bf       	out	0x33, r24	; 51
     b5e:	83 b7       	in	r24, 0x33	; 51
     b60:	88 60       	ori	r24, 0x08	; 8
     b62:	83 bf       	out	0x33, r24	; 51
     b64:	83 b7       	in	r24, 0x33	; 51
     b66:	83 bf       	out	0x33, r24	; 51
     b68:	08 95       	ret

00000b6a <TIMER0_vid_Start>:
     b6a:	83 b7       	in	r24, 0x33	; 51
     b6c:	88 7f       	andi	r24, 0xF8	; 248
     b6e:	83 bf       	out	0x33, r24	; 51
     b70:	83 b7       	in	r24, 0x33	; 51
     b72:	84 60       	ori	r24, 0x04	; 4
     b74:	83 bf       	out	0x33, r24	; 51
     b76:	08 95       	ret

00000b78 <TIMER0_vid_Stop>:
     b78:	83 b7       	in	r24, 0x33	; 51
     b7a:	88 7f       	andi	r24, 0xF8	; 248
     b7c:	83 bf       	out	0x33, r24	; 51
     b7e:	08 95       	ret

00000b80 <TIMER0_vid_Reset>:
     b80:	12 be       	out	0x32, r1	; 50
     b82:	08 95       	ret

00000b84 <TIMER0_vid_Write_COMP_OCR0>:
     b84:	8c bf       	out	0x3c, r24	; 60
     b86:	08 95       	ret

00000b88 <TIMER0_vid_COMP_Interrupt_Enable>:
}

void TIMER0_vid_COMP_Interrupt_Enable(void)//comparing INT enable
{
	SET_pin(SREG,GIE);
     b88:	8f b7       	in	r24, 0x3f	; 63
     b8a:	80 68       	ori	r24, 0x80	; 128
     b8c:	8f bf       	out	0x3f, r24	; 63
	SET_pin(TIMSK,OCIE0);
     b8e:	89 b7       	in	r24, 0x39	; 57
     b90:	82 60       	ori	r24, 0x02	; 2
     b92:	89 bf       	out	0x39, r24	; 57
     b94:	08 95       	ret

00000b96 <TWI_voidMasterInit>:
	else
	{
		Local_Error= ReservedAddressErr;
	}
	return Local_Error;
}
     b96:	81 b1       	in	r24, 0x01	; 1
     b98:	8e 7f       	andi	r24, 0xFE	; 254
     b9a:	81 b9       	out	0x01, r24	; 1
     b9c:	81 b1       	in	r24, 0x01	; 1
     b9e:	8d 7f       	andi	r24, 0xFD	; 253
     ba0:	81 b9       	out	0x01, r24	; 1
     ba2:	8c e0       	ldi	r24, 0x0C	; 12
     ba4:	80 b9       	out	0x00, r24	; 0
     ba6:	86 b7       	in	r24, 0x36	; 54
     ba8:	84 60       	ori	r24, 0x04	; 4
     baa:	86 bf       	out	0x36, r24	; 54
     bac:	08 95       	ret

00000bae <TWI_SendStartCondition>:
TWI_ErrorStatus TWI_SendStartCondition(void)
{
	TWI_ErrorStatus Local_Error= NoError;

	/*Set the start condition*/
	SET_pin(TWCR,TWCR_TWSTA);
     bae:	86 b7       	in	r24, 0x36	; 54
     bb0:	80 62       	ori	r24, 0x20	; 32
     bb2:	86 bf       	out	0x36, r24	; 54
	
	/*Clear interrupt flag to start the previous operation*/
	SET_pin(TWCR,TWCR_TWINT);
     bb4:	86 b7       	in	r24, 0x36	; 54
     bb6:	80 68       	ori	r24, 0x80	; 128
     bb8:	86 bf       	out	0x36, r24	; 54
	

	/*Polling on the interrupt flag*/
	while((GET_pin(TWCR,TWCR_TWINT))==0);
     bba:	06 b6       	in	r0, 0x36	; 54
     bbc:	07 fe       	sbrs	r0, 7
     bbe:	fd cf       	rjmp	.-6      	; 0xbba <TWI_SendStartCondition+0xc>
	
	/*check on the operation status ID*/
	if((TWSR & 0xF8) != START_ACK)
     bc0:	81 b1       	in	r24, 0x01	; 1
     bc2:	88 7f       	andi	r24, 0xF8	; 248
     bc4:	88 30       	cpi	r24, 0x08	; 8
     bc6:	11 f4       	brne	.+4      	; 0xbcc <TWI_SendStartCondition+0x1e>
	return Local_Error;
}

TWI_ErrorStatus TWI_SendStartCondition(void)
{
	TWI_ErrorStatus Local_Error= NoError;
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	08 95       	ret
	while((GET_pin(TWCR,TWCR_TWINT))==0);
	
	/*check on the operation status ID*/
	if((TWSR & 0xF8) != START_ACK)
	{
		Local_Error= StartConditionErr;
     bcc:	81 e0       	ldi	r24, 0x01	; 1

	}

	
	return Local_Error;
}
     bce:	08 95       	ret

00000bd0 <TWI_SendRepeatedStart>:
{
		
	TWI_ErrorStatus Local_Error= NoError;

	/*Set the start condition*/
	SET_pin(TWCR,TWCR_TWSTA);
     bd0:	86 b7       	in	r24, 0x36	; 54
     bd2:	80 62       	ori	r24, 0x20	; 32
     bd4:	86 bf       	out	0x36, r24	; 54

	/*Clear interrupt flag to start the previous operation*/
	SET_pin(TWCR,TWCR_TWINT);
     bd6:	86 b7       	in	r24, 0x36	; 54
     bd8:	80 68       	ori	r24, 0x80	; 128
     bda:	86 bf       	out	0x36, r24	; 54

	/*Polling on the interrupt flag*/
	while((GET_pin(TWCR,TWCR_TWINT))==0);
     bdc:	06 b6       	in	r0, 0x36	; 54
     bde:	07 fe       	sbrs	r0, 7
     be0:	fd cf       	rjmp	.-6      	; 0xbdc <TWI_SendRepeatedStart+0xc>

	/*check on the operation status ID*/
	if((TWSR & 0xF8) != REP_START_ACK)
     be2:	81 b1       	in	r24, 0x01	; 1
     be4:	88 7f       	andi	r24, 0xF8	; 248
     be6:	80 31       	cpi	r24, 0x10	; 16
     be8:	11 f4       	brne	.+4      	; 0xbee <TWI_SendRepeatedStart+0x1e>
}

TWI_ErrorStatus TWI_SendRepeatedStart(void)
{
		
	TWI_ErrorStatus Local_Error= NoError;
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	08 95       	ret
	while((GET_pin(TWCR,TWCR_TWINT))==0);

	/*check on the operation status ID*/
	if((TWSR & 0xF8) != REP_START_ACK)
	{
		Local_Error= RepeatedStartError;
     bee:	82 e0       	ldi	r24, 0x02	; 2
	else
	{
		/*Do nothing*/
	}
	return Local_Error;
}
     bf0:	08 95       	ret

00000bf2 <TWI_SendSlaveAddressWithWrite>:
TWI_ErrorStatus TWI_SendSlaveAddressWithWrite(uint8 Copy_u8SlaveAdress)
{
	TWI_ErrorStatus Local_Error= NoError;
	
	/*set the 7 bit slave address on the bus with write request*/
	TWDR= (Copy_u8SlaveAdress<<1);
     bf2:	88 0f       	add	r24, r24
     bf4:	83 b9       	out	0x03, r24	; 3

	/*Clear Start condition & Clear interrupt flag to start the previous operation*/
TWCR =0x84;
     bf6:	84 e8       	ldi	r24, 0x84	; 132
     bf8:	86 bf       	out	0x36, r24	; 54
	/*Polling on the interrupt flag*/
	while((GET_pin(TWCR,TWCR_TWINT))==0);
     bfa:	06 b6       	in	r0, 0x36	; 54
     bfc:	07 fe       	sbrs	r0, 7
     bfe:	fd cf       	rjmp	.-6      	; 0xbfa <TWI_SendSlaveAddressWithWrite+0x8>

	/*check on the operation status ID*/
	if((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK)
     c00:	81 b1       	in	r24, 0x01	; 1
     c02:	88 7f       	andi	r24, 0xF8	; 248
     c04:	88 31       	cpi	r24, 0x18	; 24
     c06:	11 f4       	brne	.+4      	; 0xc0c <TWI_SendSlaveAddressWithWrite+0x1a>
	return Local_Error;
}

TWI_ErrorStatus TWI_SendSlaveAddressWithWrite(uint8 Copy_u8SlaveAdress)
{
	TWI_ErrorStatus Local_Error= NoError;
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	08 95       	ret
	while((GET_pin(TWCR,TWCR_TWINT))==0);

	/*check on the operation status ID*/
	if((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK)
	{
		Local_Error= SlaveAddressWithWriteErr;
     c0c:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		/*Do nothing*/
	}
	return Local_Error;
}
     c0e:	08 95       	ret

00000c10 <TWI_SendSlaveAddressWithRead>:
{
	TWI_ErrorStatus Local_Error= NoError;


	/*set the 7 bit slave address on the bus with Read request*/
	TWDR= Copy_u8SlaveAdress<<1;
     c10:	88 0f       	add	r24, r24
     c12:	83 b9       	out	0x03, r24	; 3
	SET_pin(TWDR,0);
     c14:	83 b1       	in	r24, 0x03	; 3
     c16:	81 60       	ori	r24, 0x01	; 1
     c18:	83 b9       	out	0x03, r24	; 3

	/*Clear start bit &Clear interrupt flag to start the previous operation*/
	TWCR =0x84;
     c1a:	84 e8       	ldi	r24, 0x84	; 132
     c1c:	86 bf       	out	0x36, r24	; 54

	/*Polling on the interrupt flag*/
	while((GET_pin(TWCR,TWCR_TWINT))==0);
     c1e:	06 b6       	in	r0, 0x36	; 54
     c20:	07 fe       	sbrs	r0, 7
     c22:	fd cf       	rjmp	.-6      	; 0xc1e <TWI_SendSlaveAddressWithRead+0xe>

	/*check on the operation status ID*/
	if((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK)
     c24:	81 b1       	in	r24, 0x01	; 1
     c26:	88 7f       	andi	r24, 0xF8	; 248
     c28:	80 34       	cpi	r24, 0x40	; 64
     c2a:	11 f4       	brne	.+4      	; 0xc30 <TWI_SendSlaveAddressWithRead+0x20>
	return Local_Error;
}

TWI_ErrorStatus TWI_SendSlaveAddressWithRead(uint8 Copy_u8SlaveAdress)
{
	TWI_ErrorStatus Local_Error= NoError;
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	08 95       	ret
	while((GET_pin(TWCR,TWCR_TWINT))==0);

	/*check on the operation status ID*/
	if((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK)
	{
		Local_Error= SlaveAddressWithReadErr;
     c30:	84 e0       	ldi	r24, 0x04	; 4
	else
	{
		/*Do nothing*/
	}
	return Local_Error;
}
     c32:	08 95       	ret

00000c34 <TWI_MstrSendDataByte>:
TWI_ErrorStatus TWI_MstrSendDataByte(uint8 Copy_u8Data)
{
	TWI_ErrorStatus Local_Error= NoError;

	/*Write the data in the data register*/
	TWDR= Copy_u8Data;
     c34:	83 b9       	out	0x03, r24	; 3

	/*Clear interrupt flag to start the previous operation*/
	SET_pin(TWCR,TWCR_TWINT);
     c36:	86 b7       	in	r24, 0x36	; 54
     c38:	80 68       	ori	r24, 0x80	; 128
     c3a:	86 bf       	out	0x36, r24	; 54

	/*Polling on the interrupt flag*/
	while((GET_pin(TWCR,TWCR_TWINT))==0);
     c3c:	06 b6       	in	r0, 0x36	; 54
     c3e:	07 fe       	sbrs	r0, 7
     c40:	fd cf       	rjmp	.-6      	; 0xc3c <TWI_MstrSendDataByte+0x8>

	/*check on the operation status ID*/
	if((TWSR & 0xF8) != MSTR_WR_BYTE_ACK)
     c42:	81 b1       	in	r24, 0x01	; 1
     c44:	88 7f       	andi	r24, 0xF8	; 248
     c46:	88 32       	cpi	r24, 0x28	; 40
     c48:	11 f4       	brne	.+4      	; 0xc4e <TWI_MstrSendDataByte+0x1a>
	return Local_Error;
}

TWI_ErrorStatus TWI_MstrSendDataByte(uint8 Copy_u8Data)
{
	TWI_ErrorStatus Local_Error= NoError;
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	08 95       	ret
	while((GET_pin(TWCR,TWCR_TWINT))==0);

	/*check on the operation status ID*/
	if((TWSR & 0xF8) != MSTR_WR_BYTE_ACK)
	{
		Local_Error= MstrWriteByteErr;
     c4e:	85 e0       	ldi	r24, 0x05	; 5
	{
		/*Do nothing*/
	}

	return Local_Error;
}
     c50:	08 95       	ret

00000c52 <TWI_MstrReadDataByte>:

TWI_ErrorStatus TWI_MstrReadDataByte(uint8 *Copy_pu8Data)
{
     c52:	fc 01       	movw	r30, r24
	TWI_ErrorStatus Local_Error= NoError;
 if (Copy_pu8Data != NULL)
     c54:	89 2b       	or	r24, r25
     c56:	71 f0       	breq	.+28     	; 0xc74 <TWI_MstrReadDataByte+0x22>
 {
	 /*Enable Acknowledge bit generation of master receiver*/
	 SET_pin(TWCR,TWCR_TWEA);
     c58:	96 b7       	in	r25, 0x36	; 54
     c5a:	90 64       	ori	r25, 0x40	; 64
     c5c:	96 bf       	out	0x36, r25	; 54

	 /*Polling on the interrupt flag*/
	 while((GET_pin(TWCR,TWCR_TWINT))==0);
     c5e:	06 b6       	in	r0, 0x36	; 54
     c60:	07 fe       	sbrs	r0, 7
     c62:	fd cf       	rjmp	.-6      	; 0xc5e <TWI_MstrReadDataByte+0xc>

	 /*check on the operation status ID*/
	 if((TWSR & 0xF8) != MSTR_RD_BYTE_WITH_ACK)
     c64:	91 b1       	in	r25, 0x01	; 1
     c66:	98 7f       	andi	r25, 0xF8	; 248
     c68:	90 35       	cpi	r25, 0x50	; 80
     c6a:	31 f4       	brne	.+12     	; 0xc78 <TWI_MstrReadDataByte+0x26>
	 {
		 Local_Error= MstrReadByteWithAckErr;
	 }
	 else
	 {
		 *Copy_pu8Data= TWDR;
     c6c:	83 b1       	in	r24, 0x03	; 3
     c6e:	80 83       	st	Z, r24
	return Local_Error;
}

TWI_ErrorStatus TWI_MstrReadDataByte(uint8 *Copy_pu8Data)
{
	TWI_ErrorStatus Local_Error= NoError;
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	08 95       	ret
		 *Copy_pu8Data= TWDR;
	 }
 }
 else
 {
	Local_Error=NULLPOINTERDATA;
     c74:	88 e0       	ldi	r24, 0x08	; 8
     c76:	08 95       	ret
	 while((GET_pin(TWCR,TWCR_TWINT))==0);

	 /*check on the operation status ID*/
	 if((TWSR & 0xF8) != MSTR_RD_BYTE_WITH_ACK)
	 {
		 Local_Error= MstrReadByteWithAckErr;
     c78:	86 e0       	ldi	r24, 0x06	; 6
 else
 {
	Local_Error=NULLPOINTERDATA;
 }
	return Local_Error;
}
     c7a:	08 95       	ret

00000c7c <TWI_SendStopCondition>:
void TWI_SendStopCondition(void)
{
		
	
	/*Set the stop condition bit*/
	SET_pin(TWCR,TWCR_TWSTO);
     c7c:	86 b7       	in	r24, 0x36	; 54
     c7e:	80 61       	ori	r24, 0x10	; 16
     c80:	86 bf       	out	0x36, r24	; 54

	/*Clear interrupt flag to start the previous operation*/
	SET_pin(TWCR,TWCR_TWINT);
     c82:	86 b7       	in	r24, 0x36	; 54
     c84:	80 68       	ori	r24, 0x80	; 128
     c86:	86 bf       	out	0x36, r24	; 54
     c88:	08 95       	ret

00000c8a <EEPROM_SendDataByte>:
/************************************************************************/
/* EEPROM External 24c                                                                     */
/************************************************************************/
//write data on EEPROM by TWI
TWI_ErrorStatus EEPROM_SendDataByte(uint16 Copy_u16Adress,uint8 Copy_u8Data)
{
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	08 2f       	mov	r16, r24
     c94:	c9 2f       	mov	r28, r25
     c96:	16 2f       	mov	r17, r22
	TWI_ErrorStatus Local_Error =NoError;
	//Set the start condition
	
	if ( TWI_SendStartCondition() != NoError)
     c98:	0e 94 d7 05 	call	0xbae	; 0xbae <TWI_SendStartCondition>
     c9c:	81 11       	cpse	r24, r1
     c9e:	02 c0       	rjmp	.+4      	; 0xca4 <EEPROM_SendDataByte+0x1a>
/* EEPROM External 24c                                                                     */
/************************************************************************/
//write data on EEPROM by TWI
TWI_ErrorStatus EEPROM_SendDataByte(uint16 Copy_u16Adress,uint8 Copy_u8Data)
{
	TWI_ErrorStatus Local_Error =NoError;
     ca0:	d0 e0       	ldi	r29, 0x00	; 0
     ca2:	01 c0       	rjmp	.+2      	; 0xca6 <EEPROM_SendDataByte+0x1c>
	//Set the start condition
	
	if ( TWI_SendStartCondition() != NoError)
	{
		 Local_Error = StartConditionErr;
     ca4:	d1 e0       	ldi	r29, 0x01	; 1
#elif EEPROME_24C_TYPE == EEPROME_24C08
// EEPROME Device Address
 EEPROMAdress = EEPROM_FIXED_ADD_PART | (EEPROM_A2_VALUE<<2) | ((Copy_u16Adress>>8) & 0x3);
 #elif EEPROME_24C_TYPE == EEPROME_24C16
// EEPROME Device Address
 EEPROMAdress = EEPROM_FIXED_ADD_PART | ((Copy_u16Adress>>8) & 0x7);
     ca6:	8c 2f       	mov	r24, r28
     ca8:	87 70       	andi	r24, 0x07	; 7
#endif
	
	if ( TWI_SendSlaveAddressWithWrite(EEPROMAdress) != NoError)
     caa:	80 65       	ori	r24, 0x50	; 80
     cac:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TWI_SendSlaveAddressWithWrite>
     cb0:	81 11       	cpse	r24, r1
	{
		 Local_Error = SlaveAddressWithWriteErr;
     cb2:	d3 e0       	ldi	r29, 0x03	; 3
	}

	if ( TWI_MstrSendDataByte((uint8)Copy_u16Adress) != NoError)
     cb4:	80 2f       	mov	r24, r16
     cb6:	0e 94 1a 06 	call	0xc34	; 0xc34 <TWI_MstrSendDataByte>
     cba:	81 11       	cpse	r24, r1
	{
		 Local_Error = SlaveAddressWithWriteErr;
     cbc:	d3 e0       	ldi	r29, 0x03	; 3
	}
	
	if ( TWI_MstrSendDataByte(Copy_u8Data) != NoError)
     cbe:	81 2f       	mov	r24, r17
     cc0:	0e 94 1a 06 	call	0xc34	; 0xc34 <TWI_MstrSendDataByte>
     cc4:	81 11       	cpse	r24, r1
	{
		 Local_Error = MstrWriteByteErr;
     cc6:	d5 e0       	ldi	r29, 0x05	; 5
	}	
	
		
 TWI_SendStopCondition();
     cc8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <TWI_SendStopCondition>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ccc:	83 ec       	ldi	r24, 0xC3	; 195
     cce:	99 e0       	ldi	r25, 0x09	; 9
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <EEPROM_SendDataByte+0x46>
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <EEPROM_SendDataByte+0x4c>
     cd6:	00 00       	nop

_delay_ms(10);
	  return Local_Error;
}
     cd8:	8d 2f       	mov	r24, r29
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	1f 91       	pop	r17
     ce0:	0f 91       	pop	r16
     ce2:	08 95       	ret

00000ce4 <EEPROM_ReadDataByte>:

//Read data from EEPROM by TWI
TWI_ErrorStatus EEPROM_ReadDataByte(uint16 Copy_u16Adress,uint8 *Copy_pu8Data)
{
     ce4:	ff 92       	push	r15
     ce6:	0f 93       	push	r16
     ce8:	1f 93       	push	r17
     cea:	cf 93       	push	r28
     cec:	df 93       	push	r29
     cee:	f8 2e       	mov	r15, r24
     cf0:	c9 2f       	mov	r28, r25
     cf2:	8b 01       	movw	r16, r22
	TWI_ErrorStatus Local_Error =NoError ;
	//Set the start condition

	if ( TWI_SendStartCondition() != NoError)
     cf4:	0e 94 d7 05 	call	0xbae	; 0xbae <TWI_SendStartCondition>
     cf8:	81 11       	cpse	r24, r1
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <EEPROM_ReadDataByte+0x1c>
}

//Read data from EEPROM by TWI
TWI_ErrorStatus EEPROM_ReadDataByte(uint16 Copy_u16Adress,uint8 *Copy_pu8Data)
{
	TWI_ErrorStatus Local_Error =NoError ;
     cfc:	d0 e0       	ldi	r29, 0x00	; 0
     cfe:	01 c0       	rjmp	.+2      	; 0xd02 <EEPROM_ReadDataByte+0x1e>
	//Set the start condition

	if ( TWI_SendStartCondition() != NoError)
	{Local_Error = StartConditionErr;
     d00:	d1 e0       	ldi	r29, 0x01	; 1
	#elif EEPROME_24C_TYPE == EEPROME_24C08
	// EEPROME Device Address
	EEPROMAdress = EEPROM_FIXED_ADD_PART | (EEPROM_A2_VALUE<<2) | ((Copy_u16Adress>>8) & 0x3);
	#elif EEPROME_24C_TYPE == EEPROME_24C16
	// EEPROME Device Address
	EEPROMAdress = EEPROM_FIXED_ADD_PART | ((Copy_u16Adress>>8) & 0x7);
     d02:	c7 70       	andi	r28, 0x07	; 7
     d04:	c0 65       	ori	r28, 0x50	; 80
	#endif

	if ( TWI_SendSlaveAddressWithWrite(EEPROMAdress) != NoError)
     d06:	8c 2f       	mov	r24, r28
     d08:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <TWI_SendSlaveAddressWithWrite>
     d0c:	81 11       	cpse	r24, r1
	{
		Local_Error = SlaveAddressWithWriteErr;
     d0e:	d3 e0       	ldi	r29, 0x03	; 3
	}

	if ( TWI_MstrSendDataByte((uint8)Copy_u16Adress) != NoError)
     d10:	8f 2d       	mov	r24, r15
     d12:	0e 94 1a 06 	call	0xc34	; 0xc34 <TWI_MstrSendDataByte>
     d16:	81 11       	cpse	r24, r1
	{
		 Local_Error = SlaveAddressWithWriteErr;
     d18:	d3 e0       	ldi	r29, 0x03	; 3
	}

	if ( TWI_SendRepeatedStart() != NoError)
     d1a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <TWI_SendRepeatedStart>
     d1e:	81 11       	cpse	r24, r1
	{
		 Local_Error = RepeatedStartError;
     d20:	d2 e0       	ldi	r29, 0x02	; 2
	}	
	
	if ( TWI_SendSlaveAddressWithRead(EEPROMAdress) != NoError)
     d22:	8c 2f       	mov	r24, r28
     d24:	0e 94 08 06 	call	0xc10	; 0xc10 <TWI_SendSlaveAddressWithRead>
     d28:	81 11       	cpse	r24, r1
	{
		 Local_Error = SlaveAddressWithReadErr;
     d2a:	d4 e0       	ldi	r29, 0x04	; 4
	}	
	
	if ( TWI_MstrReadDataByte(Copy_pu8Data) != NoError)
     d2c:	c8 01       	movw	r24, r16
     d2e:	0e 94 29 06 	call	0xc52	; 0xc52 <TWI_MstrReadDataByte>
     d32:	81 11       	cpse	r24, r1
	{
		 Local_Error = MstrWriteByteErr;
     d34:	d5 e0       	ldi	r29, 0x05	; 5
	}
	
	TWI_SendStopCondition();
     d36:	0e 94 3e 06 	call	0xc7c	; 0xc7c <TWI_SendStopCondition>
	
	return Local_Error;
     d3a:	8d 2f       	mov	r24, r29
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	08 95       	ret

00000d48 <__divsf3>:
     d48:	0e 94 b8 06 	call	0xd70	; 0xd70 <__divsf3x>
     d4c:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__fp_round>
     d50:	0e 94 99 07 	call	0xf32	; 0xf32 <__fp_pscB>
     d54:	58 f0       	brcs	.+22     	; 0xd6c <__divsf3+0x24>
     d56:	0e 94 92 07 	call	0xf24	; 0xf24 <__fp_pscA>
     d5a:	40 f0       	brcs	.+16     	; 0xd6c <__divsf3+0x24>
     d5c:	29 f4       	brne	.+10     	; 0xd68 <__divsf3+0x20>
     d5e:	5f 3f       	cpi	r21, 0xFF	; 255
     d60:	29 f0       	breq	.+10     	; 0xd6c <__divsf3+0x24>
     d62:	0c 94 89 07 	jmp	0xf12	; 0xf12 <__fp_inf>
     d66:	51 11       	cpse	r21, r1
     d68:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__fp_szero>
     d6c:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__fp_nan>

00000d70 <__divsf3x>:
     d70:	0e 94 b1 07 	call	0xf62	; 0xf62 <__fp_split3>
     d74:	68 f3       	brcs	.-38     	; 0xd50 <__divsf3+0x8>

00000d76 <__divsf3_pse>:
     d76:	99 23       	and	r25, r25
     d78:	b1 f3       	breq	.-20     	; 0xd66 <__divsf3+0x1e>
     d7a:	55 23       	and	r21, r21
     d7c:	91 f3       	breq	.-28     	; 0xd62 <__divsf3+0x1a>
     d7e:	95 1b       	sub	r25, r21
     d80:	55 0b       	sbc	r21, r21
     d82:	bb 27       	eor	r27, r27
     d84:	aa 27       	eor	r26, r26
     d86:	62 17       	cp	r22, r18
     d88:	73 07       	cpc	r23, r19
     d8a:	84 07       	cpc	r24, r20
     d8c:	38 f0       	brcs	.+14     	; 0xd9c <__divsf3_pse+0x26>
     d8e:	9f 5f       	subi	r25, 0xFF	; 255
     d90:	5f 4f       	sbci	r21, 0xFF	; 255
     d92:	22 0f       	add	r18, r18
     d94:	33 1f       	adc	r19, r19
     d96:	44 1f       	adc	r20, r20
     d98:	aa 1f       	adc	r26, r26
     d9a:	a9 f3       	breq	.-22     	; 0xd86 <__divsf3_pse+0x10>
     d9c:	35 d0       	rcall	.+106    	; 0xe08 <__divsf3_pse+0x92>
     d9e:	0e 2e       	mov	r0, r30
     da0:	3a f0       	brmi	.+14     	; 0xdb0 <__divsf3_pse+0x3a>
     da2:	e0 e8       	ldi	r30, 0x80	; 128
     da4:	32 d0       	rcall	.+100    	; 0xe0a <__divsf3_pse+0x94>
     da6:	91 50       	subi	r25, 0x01	; 1
     da8:	50 40       	sbci	r21, 0x00	; 0
     daa:	e6 95       	lsr	r30
     dac:	00 1c       	adc	r0, r0
     dae:	ca f7       	brpl	.-14     	; 0xda2 <__divsf3_pse+0x2c>
     db0:	2b d0       	rcall	.+86     	; 0xe08 <__divsf3_pse+0x92>
     db2:	fe 2f       	mov	r31, r30
     db4:	29 d0       	rcall	.+82     	; 0xe08 <__divsf3_pse+0x92>
     db6:	66 0f       	add	r22, r22
     db8:	77 1f       	adc	r23, r23
     dba:	88 1f       	adc	r24, r24
     dbc:	bb 1f       	adc	r27, r27
     dbe:	26 17       	cp	r18, r22
     dc0:	37 07       	cpc	r19, r23
     dc2:	48 07       	cpc	r20, r24
     dc4:	ab 07       	cpc	r26, r27
     dc6:	b0 e8       	ldi	r27, 0x80	; 128
     dc8:	09 f0       	breq	.+2      	; 0xdcc <__divsf3_pse+0x56>
     dca:	bb 0b       	sbc	r27, r27
     dcc:	80 2d       	mov	r24, r0
     dce:	bf 01       	movw	r22, r30
     dd0:	ff 27       	eor	r31, r31
     dd2:	93 58       	subi	r25, 0x83	; 131
     dd4:	5f 4f       	sbci	r21, 0xFF	; 255
     dd6:	3a f0       	brmi	.+14     	; 0xde6 <__divsf3_pse+0x70>
     dd8:	9e 3f       	cpi	r25, 0xFE	; 254
     dda:	51 05       	cpc	r21, r1
     ddc:	78 f0       	brcs	.+30     	; 0xdfc <__divsf3_pse+0x86>
     dde:	0c 94 89 07 	jmp	0xf12	; 0xf12 <__fp_inf>
     de2:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__fp_szero>
     de6:	5f 3f       	cpi	r21, 0xFF	; 255
     de8:	e4 f3       	brlt	.-8      	; 0xde2 <__divsf3_pse+0x6c>
     dea:	98 3e       	cpi	r25, 0xE8	; 232
     dec:	d4 f3       	brlt	.-12     	; 0xde2 <__divsf3_pse+0x6c>
     dee:	86 95       	lsr	r24
     df0:	77 95       	ror	r23
     df2:	67 95       	ror	r22
     df4:	b7 95       	ror	r27
     df6:	f7 95       	ror	r31
     df8:	9f 5f       	subi	r25, 0xFF	; 255
     dfa:	c9 f7       	brne	.-14     	; 0xdee <__divsf3_pse+0x78>
     dfc:	88 0f       	add	r24, r24
     dfe:	91 1d       	adc	r25, r1
     e00:	96 95       	lsr	r25
     e02:	87 95       	ror	r24
     e04:	97 f9       	bld	r25, 7
     e06:	08 95       	ret
     e08:	e1 e0       	ldi	r30, 0x01	; 1
     e0a:	66 0f       	add	r22, r22
     e0c:	77 1f       	adc	r23, r23
     e0e:	88 1f       	adc	r24, r24
     e10:	bb 1f       	adc	r27, r27
     e12:	62 17       	cp	r22, r18
     e14:	73 07       	cpc	r23, r19
     e16:	84 07       	cpc	r24, r20
     e18:	ba 07       	cpc	r27, r26
     e1a:	20 f0       	brcs	.+8      	; 0xe24 <__divsf3_pse+0xae>
     e1c:	62 1b       	sub	r22, r18
     e1e:	73 0b       	sbc	r23, r19
     e20:	84 0b       	sbc	r24, r20
     e22:	ba 0b       	sbc	r27, r26
     e24:	ee 1f       	adc	r30, r30
     e26:	88 f7       	brcc	.-30     	; 0xe0a <__divsf3_pse+0x94>
     e28:	e0 95       	com	r30
     e2a:	08 95       	ret

00000e2c <__fixsfsi>:
     e2c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__fixunssfsi>
     e30:	68 94       	set
     e32:	b1 11       	cpse	r27, r1
     e34:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__fp_szero>
     e38:	08 95       	ret

00000e3a <__fixunssfsi>:
     e3a:	0e 94 b9 07 	call	0xf72	; 0xf72 <__fp_splitA>
     e3e:	88 f0       	brcs	.+34     	; 0xe62 <__fixunssfsi+0x28>
     e40:	9f 57       	subi	r25, 0x7F	; 127
     e42:	98 f0       	brcs	.+38     	; 0xe6a <__fixunssfsi+0x30>
     e44:	b9 2f       	mov	r27, r25
     e46:	99 27       	eor	r25, r25
     e48:	b7 51       	subi	r27, 0x17	; 23
     e4a:	b0 f0       	brcs	.+44     	; 0xe78 <__fixunssfsi+0x3e>
     e4c:	e1 f0       	breq	.+56     	; 0xe86 <__fixunssfsi+0x4c>
     e4e:	66 0f       	add	r22, r22
     e50:	77 1f       	adc	r23, r23
     e52:	88 1f       	adc	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	1a f0       	brmi	.+6      	; 0xe5e <__fixunssfsi+0x24>
     e58:	ba 95       	dec	r27
     e5a:	c9 f7       	brne	.-14     	; 0xe4e <__fixunssfsi+0x14>
     e5c:	14 c0       	rjmp	.+40     	; 0xe86 <__fixunssfsi+0x4c>
     e5e:	b1 30       	cpi	r27, 0x01	; 1
     e60:	91 f0       	breq	.+36     	; 0xe86 <__fixunssfsi+0x4c>
     e62:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__fp_zero>
     e66:	b1 e0       	ldi	r27, 0x01	; 1
     e68:	08 95       	ret
     e6a:	0c 94 d3 07 	jmp	0xfa6	; 0xfa6 <__fp_zero>
     e6e:	67 2f       	mov	r22, r23
     e70:	78 2f       	mov	r23, r24
     e72:	88 27       	eor	r24, r24
     e74:	b8 5f       	subi	r27, 0xF8	; 248
     e76:	39 f0       	breq	.+14     	; 0xe86 <__fixunssfsi+0x4c>
     e78:	b9 3f       	cpi	r27, 0xF9	; 249
     e7a:	cc f3       	brlt	.-14     	; 0xe6e <__fixunssfsi+0x34>
     e7c:	86 95       	lsr	r24
     e7e:	77 95       	ror	r23
     e80:	67 95       	ror	r22
     e82:	b3 95       	inc	r27
     e84:	d9 f7       	brne	.-10     	; 0xe7c <__fixunssfsi+0x42>
     e86:	3e f4       	brtc	.+14     	; 0xe96 <__fixunssfsi+0x5c>
     e88:	90 95       	com	r25
     e8a:	80 95       	com	r24
     e8c:	70 95       	com	r23
     e8e:	61 95       	neg	r22
     e90:	7f 4f       	sbci	r23, 0xFF	; 255
     e92:	8f 4f       	sbci	r24, 0xFF	; 255
     e94:	9f 4f       	sbci	r25, 0xFF	; 255
     e96:	08 95       	ret

00000e98 <__floatunsisf>:
     e98:	e8 94       	clt
     e9a:	09 c0       	rjmp	.+18     	; 0xeae <__floatsisf+0x12>

00000e9c <__floatsisf>:
     e9c:	97 fb       	bst	r25, 7
     e9e:	3e f4       	brtc	.+14     	; 0xeae <__floatsisf+0x12>
     ea0:	90 95       	com	r25
     ea2:	80 95       	com	r24
     ea4:	70 95       	com	r23
     ea6:	61 95       	neg	r22
     ea8:	7f 4f       	sbci	r23, 0xFF	; 255
     eaa:	8f 4f       	sbci	r24, 0xFF	; 255
     eac:	9f 4f       	sbci	r25, 0xFF	; 255
     eae:	99 23       	and	r25, r25
     eb0:	a9 f0       	breq	.+42     	; 0xedc <__floatsisf+0x40>
     eb2:	f9 2f       	mov	r31, r25
     eb4:	96 e9       	ldi	r25, 0x96	; 150
     eb6:	bb 27       	eor	r27, r27
     eb8:	93 95       	inc	r25
     eba:	f6 95       	lsr	r31
     ebc:	87 95       	ror	r24
     ebe:	77 95       	ror	r23
     ec0:	67 95       	ror	r22
     ec2:	b7 95       	ror	r27
     ec4:	f1 11       	cpse	r31, r1
     ec6:	f8 cf       	rjmp	.-16     	; 0xeb8 <__floatsisf+0x1c>
     ec8:	fa f4       	brpl	.+62     	; 0xf08 <__floatsisf+0x6c>
     eca:	bb 0f       	add	r27, r27
     ecc:	11 f4       	brne	.+4      	; 0xed2 <__floatsisf+0x36>
     ece:	60 ff       	sbrs	r22, 0
     ed0:	1b c0       	rjmp	.+54     	; 0xf08 <__floatsisf+0x6c>
     ed2:	6f 5f       	subi	r22, 0xFF	; 255
     ed4:	7f 4f       	sbci	r23, 0xFF	; 255
     ed6:	8f 4f       	sbci	r24, 0xFF	; 255
     ed8:	9f 4f       	sbci	r25, 0xFF	; 255
     eda:	16 c0       	rjmp	.+44     	; 0xf08 <__floatsisf+0x6c>
     edc:	88 23       	and	r24, r24
     ede:	11 f0       	breq	.+4      	; 0xee4 <__floatsisf+0x48>
     ee0:	96 e9       	ldi	r25, 0x96	; 150
     ee2:	11 c0       	rjmp	.+34     	; 0xf06 <__floatsisf+0x6a>
     ee4:	77 23       	and	r23, r23
     ee6:	21 f0       	breq	.+8      	; 0xef0 <__floatsisf+0x54>
     ee8:	9e e8       	ldi	r25, 0x8E	; 142
     eea:	87 2f       	mov	r24, r23
     eec:	76 2f       	mov	r23, r22
     eee:	05 c0       	rjmp	.+10     	; 0xefa <__floatsisf+0x5e>
     ef0:	66 23       	and	r22, r22
     ef2:	71 f0       	breq	.+28     	; 0xf10 <__floatsisf+0x74>
     ef4:	96 e8       	ldi	r25, 0x86	; 134
     ef6:	86 2f       	mov	r24, r22
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	2a f0       	brmi	.+10     	; 0xf08 <__floatsisf+0x6c>
     efe:	9a 95       	dec	r25
     f00:	66 0f       	add	r22, r22
     f02:	77 1f       	adc	r23, r23
     f04:	88 1f       	adc	r24, r24
     f06:	da f7       	brpl	.-10     	; 0xefe <__floatsisf+0x62>
     f08:	88 0f       	add	r24, r24
     f0a:	96 95       	lsr	r25
     f0c:	87 95       	ror	r24
     f0e:	97 f9       	bld	r25, 7
     f10:	08 95       	ret

00000f12 <__fp_inf>:
     f12:	97 f9       	bld	r25, 7
     f14:	9f 67       	ori	r25, 0x7F	; 127
     f16:	80 e8       	ldi	r24, 0x80	; 128
     f18:	70 e0       	ldi	r23, 0x00	; 0
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	08 95       	ret

00000f1e <__fp_nan>:
     f1e:	9f ef       	ldi	r25, 0xFF	; 255
     f20:	80 ec       	ldi	r24, 0xC0	; 192
     f22:	08 95       	ret

00000f24 <__fp_pscA>:
     f24:	00 24       	eor	r0, r0
     f26:	0a 94       	dec	r0
     f28:	16 16       	cp	r1, r22
     f2a:	17 06       	cpc	r1, r23
     f2c:	18 06       	cpc	r1, r24
     f2e:	09 06       	cpc	r0, r25
     f30:	08 95       	ret

00000f32 <__fp_pscB>:
     f32:	00 24       	eor	r0, r0
     f34:	0a 94       	dec	r0
     f36:	12 16       	cp	r1, r18
     f38:	13 06       	cpc	r1, r19
     f3a:	14 06       	cpc	r1, r20
     f3c:	05 06       	cpc	r0, r21
     f3e:	08 95       	ret

00000f40 <__fp_round>:
     f40:	09 2e       	mov	r0, r25
     f42:	03 94       	inc	r0
     f44:	00 0c       	add	r0, r0
     f46:	11 f4       	brne	.+4      	; 0xf4c <__fp_round+0xc>
     f48:	88 23       	and	r24, r24
     f4a:	52 f0       	brmi	.+20     	; 0xf60 <__fp_round+0x20>
     f4c:	bb 0f       	add	r27, r27
     f4e:	40 f4       	brcc	.+16     	; 0xf60 <__fp_round+0x20>
     f50:	bf 2b       	or	r27, r31
     f52:	11 f4       	brne	.+4      	; 0xf58 <__fp_round+0x18>
     f54:	60 ff       	sbrs	r22, 0
     f56:	04 c0       	rjmp	.+8      	; 0xf60 <__fp_round+0x20>
     f58:	6f 5f       	subi	r22, 0xFF	; 255
     f5a:	7f 4f       	sbci	r23, 0xFF	; 255
     f5c:	8f 4f       	sbci	r24, 0xFF	; 255
     f5e:	9f 4f       	sbci	r25, 0xFF	; 255
     f60:	08 95       	ret

00000f62 <__fp_split3>:
     f62:	57 fd       	sbrc	r21, 7
     f64:	90 58       	subi	r25, 0x80	; 128
     f66:	44 0f       	add	r20, r20
     f68:	55 1f       	adc	r21, r21
     f6a:	59 f0       	breq	.+22     	; 0xf82 <__fp_splitA+0x10>
     f6c:	5f 3f       	cpi	r21, 0xFF	; 255
     f6e:	71 f0       	breq	.+28     	; 0xf8c <__fp_splitA+0x1a>
     f70:	47 95       	ror	r20

00000f72 <__fp_splitA>:
     f72:	88 0f       	add	r24, r24
     f74:	97 fb       	bst	r25, 7
     f76:	99 1f       	adc	r25, r25
     f78:	61 f0       	breq	.+24     	; 0xf92 <__fp_splitA+0x20>
     f7a:	9f 3f       	cpi	r25, 0xFF	; 255
     f7c:	79 f0       	breq	.+30     	; 0xf9c <__fp_splitA+0x2a>
     f7e:	87 95       	ror	r24
     f80:	08 95       	ret
     f82:	12 16       	cp	r1, r18
     f84:	13 06       	cpc	r1, r19
     f86:	14 06       	cpc	r1, r20
     f88:	55 1f       	adc	r21, r21
     f8a:	f2 cf       	rjmp	.-28     	; 0xf70 <__fp_split3+0xe>
     f8c:	46 95       	lsr	r20
     f8e:	f1 df       	rcall	.-30     	; 0xf72 <__fp_splitA>
     f90:	08 c0       	rjmp	.+16     	; 0xfa2 <__fp_splitA+0x30>
     f92:	16 16       	cp	r1, r22
     f94:	17 06       	cpc	r1, r23
     f96:	18 06       	cpc	r1, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	f1 cf       	rjmp	.-30     	; 0xf7e <__fp_splitA+0xc>
     f9c:	86 95       	lsr	r24
     f9e:	71 05       	cpc	r23, r1
     fa0:	61 05       	cpc	r22, r1
     fa2:	08 94       	sec
     fa4:	08 95       	ret

00000fa6 <__fp_zero>:
     fa6:	e8 94       	clt

00000fa8 <__fp_szero>:
     fa8:	bb 27       	eor	r27, r27
     faa:	66 27       	eor	r22, r22
     fac:	77 27       	eor	r23, r23
     fae:	cb 01       	movw	r24, r22
     fb0:	97 f9       	bld	r25, 7
     fb2:	08 95       	ret

00000fb4 <__mulsf3>:
     fb4:	0e 94 ed 07 	call	0xfda	; 0xfda <__mulsf3x>
     fb8:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__fp_round>
     fbc:	0e 94 92 07 	call	0xf24	; 0xf24 <__fp_pscA>
     fc0:	38 f0       	brcs	.+14     	; 0xfd0 <__mulsf3+0x1c>
     fc2:	0e 94 99 07 	call	0xf32	; 0xf32 <__fp_pscB>
     fc6:	20 f0       	brcs	.+8      	; 0xfd0 <__mulsf3+0x1c>
     fc8:	95 23       	and	r25, r21
     fca:	11 f0       	breq	.+4      	; 0xfd0 <__mulsf3+0x1c>
     fcc:	0c 94 89 07 	jmp	0xf12	; 0xf12 <__fp_inf>
     fd0:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__fp_nan>
     fd4:	11 24       	eor	r1, r1
     fd6:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__fp_szero>

00000fda <__mulsf3x>:
     fda:	0e 94 b1 07 	call	0xf62	; 0xf62 <__fp_split3>
     fde:	70 f3       	brcs	.-36     	; 0xfbc <__mulsf3+0x8>

00000fe0 <__mulsf3_pse>:
     fe0:	95 9f       	mul	r25, r21
     fe2:	c1 f3       	breq	.-16     	; 0xfd4 <__mulsf3+0x20>
     fe4:	95 0f       	add	r25, r21
     fe6:	50 e0       	ldi	r21, 0x00	; 0
     fe8:	55 1f       	adc	r21, r21
     fea:	62 9f       	mul	r22, r18
     fec:	f0 01       	movw	r30, r0
     fee:	72 9f       	mul	r23, r18
     ff0:	bb 27       	eor	r27, r27
     ff2:	f0 0d       	add	r31, r0
     ff4:	b1 1d       	adc	r27, r1
     ff6:	63 9f       	mul	r22, r19
     ff8:	aa 27       	eor	r26, r26
     ffa:	f0 0d       	add	r31, r0
     ffc:	b1 1d       	adc	r27, r1
     ffe:	aa 1f       	adc	r26, r26
    1000:	64 9f       	mul	r22, r20
    1002:	66 27       	eor	r22, r22
    1004:	b0 0d       	add	r27, r0
    1006:	a1 1d       	adc	r26, r1
    1008:	66 1f       	adc	r22, r22
    100a:	82 9f       	mul	r24, r18
    100c:	22 27       	eor	r18, r18
    100e:	b0 0d       	add	r27, r0
    1010:	a1 1d       	adc	r26, r1
    1012:	62 1f       	adc	r22, r18
    1014:	73 9f       	mul	r23, r19
    1016:	b0 0d       	add	r27, r0
    1018:	a1 1d       	adc	r26, r1
    101a:	62 1f       	adc	r22, r18
    101c:	83 9f       	mul	r24, r19
    101e:	a0 0d       	add	r26, r0
    1020:	61 1d       	adc	r22, r1
    1022:	22 1f       	adc	r18, r18
    1024:	74 9f       	mul	r23, r20
    1026:	33 27       	eor	r19, r19
    1028:	a0 0d       	add	r26, r0
    102a:	61 1d       	adc	r22, r1
    102c:	23 1f       	adc	r18, r19
    102e:	84 9f       	mul	r24, r20
    1030:	60 0d       	add	r22, r0
    1032:	21 1d       	adc	r18, r1
    1034:	82 2f       	mov	r24, r18
    1036:	76 2f       	mov	r23, r22
    1038:	6a 2f       	mov	r22, r26
    103a:	11 24       	eor	r1, r1
    103c:	9f 57       	subi	r25, 0x7F	; 127
    103e:	50 40       	sbci	r21, 0x00	; 0
    1040:	9a f0       	brmi	.+38     	; 0x1068 <__mulsf3_pse+0x88>
    1042:	f1 f0       	breq	.+60     	; 0x1080 <__mulsf3_pse+0xa0>
    1044:	88 23       	and	r24, r24
    1046:	4a f0       	brmi	.+18     	; 0x105a <__mulsf3_pse+0x7a>
    1048:	ee 0f       	add	r30, r30
    104a:	ff 1f       	adc	r31, r31
    104c:	bb 1f       	adc	r27, r27
    104e:	66 1f       	adc	r22, r22
    1050:	77 1f       	adc	r23, r23
    1052:	88 1f       	adc	r24, r24
    1054:	91 50       	subi	r25, 0x01	; 1
    1056:	50 40       	sbci	r21, 0x00	; 0
    1058:	a9 f7       	brne	.-22     	; 0x1044 <__mulsf3_pse+0x64>
    105a:	9e 3f       	cpi	r25, 0xFE	; 254
    105c:	51 05       	cpc	r21, r1
    105e:	80 f0       	brcs	.+32     	; 0x1080 <__mulsf3_pse+0xa0>
    1060:	0c 94 89 07 	jmp	0xf12	; 0xf12 <__fp_inf>
    1064:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__fp_szero>
    1068:	5f 3f       	cpi	r21, 0xFF	; 255
    106a:	e4 f3       	brlt	.-8      	; 0x1064 <__mulsf3_pse+0x84>
    106c:	98 3e       	cpi	r25, 0xE8	; 232
    106e:	d4 f3       	brlt	.-12     	; 0x1064 <__mulsf3_pse+0x84>
    1070:	86 95       	lsr	r24
    1072:	77 95       	ror	r23
    1074:	67 95       	ror	r22
    1076:	b7 95       	ror	r27
    1078:	f7 95       	ror	r31
    107a:	e7 95       	ror	r30
    107c:	9f 5f       	subi	r25, 0xFF	; 255
    107e:	c1 f7       	brne	.-16     	; 0x1070 <__mulsf3_pse+0x90>
    1080:	fe 2b       	or	r31, r30
    1082:	88 0f       	add	r24, r24
    1084:	91 1d       	adc	r25, r1
    1086:	96 95       	lsr	r25
    1088:	87 95       	ror	r24
    108a:	97 f9       	bld	r25, 7
    108c:	08 95       	ret

0000108e <__divmodsi4>:
    108e:	05 2e       	mov	r0, r21
    1090:	97 fb       	bst	r25, 7
    1092:	1e f4       	brtc	.+6      	; 0x109a <__divmodsi4+0xc>
    1094:	00 94       	com	r0
    1096:	0e 94 5e 08 	call	0x10bc	; 0x10bc <__negsi2>
    109a:	57 fd       	sbrc	r21, 7
    109c:	07 d0       	rcall	.+14     	; 0x10ac <__divmodsi4_neg2>
    109e:	0e 94 66 08 	call	0x10cc	; 0x10cc <__udivmodsi4>
    10a2:	07 fc       	sbrc	r0, 7
    10a4:	03 d0       	rcall	.+6      	; 0x10ac <__divmodsi4_neg2>
    10a6:	4e f4       	brtc	.+18     	; 0x10ba <__divmodsi4_exit>
    10a8:	0c 94 5e 08 	jmp	0x10bc	; 0x10bc <__negsi2>

000010ac <__divmodsi4_neg2>:
    10ac:	50 95       	com	r21
    10ae:	40 95       	com	r20
    10b0:	30 95       	com	r19
    10b2:	21 95       	neg	r18
    10b4:	3f 4f       	sbci	r19, 0xFF	; 255
    10b6:	4f 4f       	sbci	r20, 0xFF	; 255
    10b8:	5f 4f       	sbci	r21, 0xFF	; 255

000010ba <__divmodsi4_exit>:
    10ba:	08 95       	ret

000010bc <__negsi2>:
    10bc:	90 95       	com	r25
    10be:	80 95       	com	r24
    10c0:	70 95       	com	r23
    10c2:	61 95       	neg	r22
    10c4:	7f 4f       	sbci	r23, 0xFF	; 255
    10c6:	8f 4f       	sbci	r24, 0xFF	; 255
    10c8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ca:	08 95       	ret

000010cc <__udivmodsi4>:
    10cc:	a1 e2       	ldi	r26, 0x21	; 33
    10ce:	1a 2e       	mov	r1, r26
    10d0:	aa 1b       	sub	r26, r26
    10d2:	bb 1b       	sub	r27, r27
    10d4:	fd 01       	movw	r30, r26
    10d6:	0d c0       	rjmp	.+26     	; 0x10f2 <__udivmodsi4_ep>

000010d8 <__udivmodsi4_loop>:
    10d8:	aa 1f       	adc	r26, r26
    10da:	bb 1f       	adc	r27, r27
    10dc:	ee 1f       	adc	r30, r30
    10de:	ff 1f       	adc	r31, r31
    10e0:	a2 17       	cp	r26, r18
    10e2:	b3 07       	cpc	r27, r19
    10e4:	e4 07       	cpc	r30, r20
    10e6:	f5 07       	cpc	r31, r21
    10e8:	20 f0       	brcs	.+8      	; 0x10f2 <__udivmodsi4_ep>
    10ea:	a2 1b       	sub	r26, r18
    10ec:	b3 0b       	sbc	r27, r19
    10ee:	e4 0b       	sbc	r30, r20
    10f0:	f5 0b       	sbc	r31, r21

000010f2 <__udivmodsi4_ep>:
    10f2:	66 1f       	adc	r22, r22
    10f4:	77 1f       	adc	r23, r23
    10f6:	88 1f       	adc	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	1a 94       	dec	r1
    10fc:	69 f7       	brne	.-38     	; 0x10d8 <__udivmodsi4_loop>
    10fe:	60 95       	com	r22
    1100:	70 95       	com	r23
    1102:	80 95       	com	r24
    1104:	90 95       	com	r25
    1106:	9b 01       	movw	r18, r22
    1108:	ac 01       	movw	r20, r24
    110a:	bd 01       	movw	r22, r26
    110c:	cf 01       	movw	r24, r30
    110e:	08 95       	ret

00001110 <_exit>:
    1110:	f8 94       	cli

00001112 <__stop_program>:
    1112:	ff cf       	rjmp	.-2      	; 0x1112 <__stop_program>
